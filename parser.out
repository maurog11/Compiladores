Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CONCATSTR
    DOSPUNTOS
    LCORCHETE
    RCORCHETE

Grammar

Rule 0     S' -> program
Rule 1     program -> import declaracion_sentencias
Rule 2     program -> import
Rule 3     program -> declaracion_sentencias
Rule 4     declaracion_sentencias -> sentencias declaracion_sentencias
Rule 5     declaracion_sentencias -> sentencias
Rule 6     sentencias -> sentassign
Rule 7     sentencias -> call_function CIERRE
Rule 8     sentencias -> sentif
Rule 9     sentencias -> sentecho
Rule 10    sentencias -> sentfunc
Rule 11    sentencias -> sentreturn
Rule 12    sentencias -> sentfor
Rule 13    sentencias -> sentwhile
Rule 14    sentencias -> sentdowhile
Rule 15    sentreturn -> RETURN type CIERRE
Rule 16    sentreturn -> RETURN cond CIERRE
Rule 17    sentecho -> ECHO typevar CIERRE
Rule 18    sentecho -> ECHO exp CIERRE
Rule 19    sentecho -> ECHO cond CIERRE
Rule 20    sentif -> IF genif auxsentif
Rule 21    auxsentif -> ELSE IF genif auxsentif
Rule 22    auxsentif -> ELSE LCURBRACE declaracion_sentencias RCURBRACE
Rule 23    auxsentif -> empty
Rule 24    genif -> LPARENT cond RPARENT LCURBRACE declaracion_sentencias RCURBRACE
Rule 25    sentassign -> ID EQUAL exp CIERRE
Rule 26    sentassign -> ID PLUS PLUS CIERRE
Rule 27    sentassign -> ID MINUS MINUS CIERRE
Rule 28    bool -> TRUE
Rule 29    bool -> FALSE
Rule 30    oplogicos -> AND
Rule 31    oplogicos -> OR
Rule 32    oplogicos -> XOR
Rule 33    oplogicos -> NOT
Rule 34    exp -> expsimple opcomparacion expsimple
Rule 35    exp -> LPARENT expsimple opcomparacion expsimple RPARENT
Rule 36    exp -> expsimple
Rule 37    opcomparacion -> IGUAL
Rule 38    opcomparacion -> NOIGUAL
Rule 39    opcomparacion -> IDENTICO
Rule 40    opcomparacion -> MAYOR
Rule 41    opcomparacion -> MAYORIG
Rule 42    opcomparacion -> MENOR
Rule 43    opcomparacion -> MENORIG
Rule 44    expsimple -> expsimple opsuma term
Rule 45    expsimple -> term
Rule 46    term -> term opmult factor
Rule 47    term -> factor
Rule 48    factor -> INTEGER
Rule 49    factor -> ID
Rule 50    factor -> call_function
Rule 51    factor -> LPARENT expsimple RPARENT
Rule 52    typevar -> INTEGER
Rule 53    typevar -> STRING
Rule 54    typevar -> STRINGG
Rule 55    typevar -> TRUE
Rule 56    typevar -> FALSE
Rule 57    opsuma -> PLUS
Rule 58    opsuma -> MINUS
Rule 59    opmult -> TIMES
Rule 60    opmult -> DIV
Rule 61    opmult -> MODULO
Rule 62    opmult -> EXPONENCIACION
Rule 63    cond -> type
Rule 64    cond -> cond opcomparacion cond
Rule 65    cond -> cond oplogicos cond
Rule 66    cond -> LPARENT type RPARENT
Rule 67    cond -> LPARENT cond RPARENT
Rule 68    type -> typevar
Rule 69    type -> var_declaration_gen
Rule 70    var_declaration_gen -> ID
Rule 71    var_declaration_gen -> ID PLUS PLUS
Rule 72    var_declaration_gen -> ID MINUS MINUS
Rule 73    var_declaration_gen -> MINUS MINUS ID
Rule 74    var_declaration_gen -> PLUS PLUS ID
Rule 75    var_declaration_gen -> typevar
Rule 76    var_declaration_gen -> exp
Rule 77    arg -> var_declaration_gen
Rule 78    arg -> type
Rule 79    arg -> expsimple
Rule 80    arg -> type COMMA arg
Rule 81    arg -> STRING
Rule 82    arg -> STRINGG
Rule 83    arg -> var_declaration_gen COMMA arg
Rule 84    arg -> STRING COMMA arg
Rule 85    arg -> STRINGG COMMA arg
Rule 86    arg -> <empty>
Rule 87    argfunc -> ID
Rule 88    argfunc -> ID COMMA argfunc
Rule 89    argfunc -> <empty>
Rule 90    sentfunc -> FUNCTION NFUNCTION LPARENT argfunc RPARENT LCURBRACE declaracion_sentencias RCURBRACE
Rule 91    call_function -> NFUNCTION
Rule 92    call_function -> NFUNCTION LPARENT arg RPARENT
Rule 93    sentfor -> FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE expsimple RPARENT LCURBRACE declaracion_sentencias RCURBRACE
Rule 94    sentfor -> FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE ID PLUS PLUS RPARENT LCURBRACE declaracion_sentencias RCURBRACE
Rule 95    sentfor -> FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE ID MINUS MINUS RPARENT LCURBRACE declaracion_sentencias RCURBRACE
Rule 96    sentwhile -> WHILE LPARENT cond RPARENT LCURBRACE declaracion_sentencias RCURBRACE
Rule 97    sentdowhile -> DO LCURBRACE declaracion_sentencias RCURBRACE WHILE LPARENT cond RPARENT CIERRE
Rule 98    import -> INCLUDE STRINGG CIERRE
Rule 99    empty -> <empty>

Terminals, with rules where they appear

AND                  : 30
CIERRE               : 7 15 16 17 18 19 25 26 27 93 93 94 94 95 95 97 98
COMMA                : 80 83 84 85 88
CONCATSTR            : 
DIV                  : 60
DO                   : 97
DOSPUNTOS            : 
ECHO                 : 17 18 19
ELSE                 : 21 22
EQUAL                : 25 93 94 95
EXPONENCIACION       : 62
FALSE                : 29 56
FOR                  : 93 94 95
FUNCTION             : 90
ID                   : 25 26 27 49 70 71 72 73 74 87 88 93 94 94 95 95
IDENTICO             : 39
IF                   : 20 21
IGUAL                : 37
INCLUDE              : 98
INTEGER              : 48 52
LCORCHETE            : 
LCURBRACE            : 22 24 90 93 94 95 96 97
LPARENT              : 24 35 51 66 67 90 92 93 94 95 96 97
MAYOR                : 40
MAYORIG              : 41
MENOR                : 42
MENORIG              : 43
MINUS                : 27 27 58 72 72 73 73 95 95
MODULO               : 61
NFUNCTION            : 90 91 92
NOIGUAL              : 38
NOT                  : 33
OR                   : 31
PLUS                 : 26 26 57 71 71 74 74 94 94
RCORCHETE            : 
RCURBRACE            : 22 24 90 93 94 95 96 97
RETURN               : 15 16
RPARENT              : 24 35 51 66 67 90 92 93 94 95 96 97
STRING               : 53 81 84
STRINGG              : 54 82 85 98
TIMES                : 59
TRUE                 : 28 55
WHILE                : 96 97
XOR                  : 32
error                : 

Nonterminals, with rules where they appear

arg                  : 80 83 84 85 92
argfunc              : 88 90
auxsentif            : 20 21
bool                 : 
call_function        : 7 50
cond                 : 16 19 24 64 64 65 65 67 93 94 95 96 97
declaracion_sentencias : 1 3 4 22 24 90 93 94 95 96 97
empty                : 23
exp                  : 18 25 76
expsimple            : 34 34 35 35 36 44 51 79 93 93 94 95
factor               : 46 47
genif                : 20 21
import               : 1 2
opcomparacion        : 34 35 64
oplogicos            : 65
opmult               : 46
opsuma               : 44
program              : 0
sentassign           : 6
sentdowhile          : 14
sentecho             : 9
sentencias           : 4 5
sentfor              : 12
sentfunc             : 10
sentif               : 8
sentreturn           : 11
sentwhile            : 13
term                 : 44 45 46
type                 : 15 63 66 78 80
typevar              : 17 68 75
var_declaration_gen  : 69 77 83

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . import declaracion_sentencias
    (2) program -> . import
    (3) program -> . declaracion_sentencias
    (98) import -> . INCLUDE STRINGG CIERRE
    (4) declaracion_sentencias -> . sentencias declaracion_sentencias
    (5) declaracion_sentencias -> . sentencias
    (6) sentencias -> . sentassign
    (7) sentencias -> . call_function CIERRE
    (8) sentencias -> . sentif
    (9) sentencias -> . sentecho
    (10) sentencias -> . sentfunc
    (11) sentencias -> . sentreturn
    (12) sentencias -> . sentfor
    (13) sentencias -> . sentwhile
    (14) sentencias -> . sentdowhile
    (25) sentassign -> . ID EQUAL exp CIERRE
    (26) sentassign -> . ID PLUS PLUS CIERRE
    (27) sentassign -> . ID MINUS MINUS CIERRE
    (91) call_function -> . NFUNCTION
    (92) call_function -> . NFUNCTION LPARENT arg RPARENT
    (20) sentif -> . IF genif auxsentif
    (17) sentecho -> . ECHO typevar CIERRE
    (18) sentecho -> . ECHO exp CIERRE
    (19) sentecho -> . ECHO cond CIERRE
    (90) sentfunc -> . FUNCTION NFUNCTION LPARENT argfunc RPARENT LCURBRACE declaracion_sentencias RCURBRACE
    (15) sentreturn -> . RETURN type CIERRE
    (16) sentreturn -> . RETURN cond CIERRE
    (93) sentfor -> . FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE expsimple RPARENT LCURBRACE declaracion_sentencias RCURBRACE
    (94) sentfor -> . FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE ID PLUS PLUS RPARENT LCURBRACE declaracion_sentencias RCURBRACE
    (95) sentfor -> . FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE ID MINUS MINUS RPARENT LCURBRACE declaracion_sentencias RCURBRACE
    (96) sentwhile -> . WHILE LPARENT cond RPARENT LCURBRACE declaracion_sentencias RCURBRACE
    (97) sentdowhile -> . DO LCURBRACE declaracion_sentencias RCURBRACE WHILE LPARENT cond RPARENT CIERRE

    INCLUDE         shift and go to state 4
    ID              shift and go to state 15
    NFUNCTION       shift and go to state 16
    IF              shift and go to state 17
    ECHO            shift and go to state 18
    FUNCTION        shift and go to state 19
    RETURN          shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    DO              shift and go to state 23

    program                        shift and go to state 1
    import                         shift and go to state 2
    declaracion_sentencias         shift and go to state 3
    sentencias                     shift and go to state 5
    sentassign                     shift and go to state 6
    call_function                  shift and go to state 7
    sentif                         shift and go to state 8
    sentecho                       shift and go to state 9
    sentfunc                       shift and go to state 10
    sentreturn                     shift and go to state 11
    sentfor                        shift and go to state 12
    sentwhile                      shift and go to state 13
    sentdowhile                    shift and go to state 14

state 1

    (0) S' -> program .



state 2

    (1) program -> import . declaracion_sentencias
    (2) program -> import .
    (4) declaracion_sentencias -> . sentencias declaracion_sentencias
    (5) declaracion_sentencias -> . sentencias
    (6) sentencias -> . sentassign
    (7) sentencias -> . call_function CIERRE
    (8) sentencias -> . sentif
    (9) sentencias -> . sentecho
    (10) sentencias -> . sentfunc
    (11) sentencias -> . sentreturn
    (12) sentencias -> . sentfor
    (13) sentencias -> . sentwhile
    (14) sentencias -> . sentdowhile
    (25) sentassign -> . ID EQUAL exp CIERRE
    (26) sentassign -> . ID PLUS PLUS CIERRE
    (27) sentassign -> . ID MINUS MINUS CIERRE
    (91) call_function -> . NFUNCTION
    (92) call_function -> . NFUNCTION LPARENT arg RPARENT
    (20) sentif -> . IF genif auxsentif
    (17) sentecho -> . ECHO typevar CIERRE
    (18) sentecho -> . ECHO exp CIERRE
    (19) sentecho -> . ECHO cond CIERRE
    (90) sentfunc -> . FUNCTION NFUNCTION LPARENT argfunc RPARENT LCURBRACE declaracion_sentencias RCURBRACE
    (15) sentreturn -> . RETURN type CIERRE
    (16) sentreturn -> . RETURN cond CIERRE
    (93) sentfor -> . FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE expsimple RPARENT LCURBRACE declaracion_sentencias RCURBRACE
    (94) sentfor -> . FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE ID PLUS PLUS RPARENT LCURBRACE declaracion_sentencias RCURBRACE
    (95) sentfor -> . FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE ID MINUS MINUS RPARENT LCURBRACE declaracion_sentencias RCURBRACE
    (96) sentwhile -> . WHILE LPARENT cond RPARENT LCURBRACE declaracion_sentencias RCURBRACE
    (97) sentdowhile -> . DO LCURBRACE declaracion_sentencias RCURBRACE WHILE LPARENT cond RPARENT CIERRE

    $end            reduce using rule 2 (program -> import .)
    ID              shift and go to state 15
    NFUNCTION       shift and go to state 16
    IF              shift and go to state 17
    ECHO            shift and go to state 18
    FUNCTION        shift and go to state 19
    RETURN          shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    DO              shift and go to state 23

    declaracion_sentencias         shift and go to state 24
    sentencias                     shift and go to state 5
    sentassign                     shift and go to state 6
    call_function                  shift and go to state 7
    sentif                         shift and go to state 8
    sentecho                       shift and go to state 9
    sentfunc                       shift and go to state 10
    sentreturn                     shift and go to state 11
    sentfor                        shift and go to state 12
    sentwhile                      shift and go to state 13
    sentdowhile                    shift and go to state 14

state 3

    (3) program -> declaracion_sentencias .

    $end            reduce using rule 3 (program -> declaracion_sentencias .)


state 4

    (98) import -> INCLUDE . STRINGG CIERRE

    STRINGG         shift and go to state 25


state 5

    (4) declaracion_sentencias -> sentencias . declaracion_sentencias
    (5) declaracion_sentencias -> sentencias .
    (4) declaracion_sentencias -> . sentencias declaracion_sentencias
    (5) declaracion_sentencias -> . sentencias
    (6) sentencias -> . sentassign
    (7) sentencias -> . call_function CIERRE
    (8) sentencias -> . sentif
    (9) sentencias -> . sentecho
    (10) sentencias -> . sentfunc
    (11) sentencias -> . sentreturn
    (12) sentencias -> . sentfor
    (13) sentencias -> . sentwhile
    (14) sentencias -> . sentdowhile
    (25) sentassign -> . ID EQUAL exp CIERRE
    (26) sentassign -> . ID PLUS PLUS CIERRE
    (27) sentassign -> . ID MINUS MINUS CIERRE
    (91) call_function -> . NFUNCTION
    (92) call_function -> . NFUNCTION LPARENT arg RPARENT
    (20) sentif -> . IF genif auxsentif
    (17) sentecho -> . ECHO typevar CIERRE
    (18) sentecho -> . ECHO exp CIERRE
    (19) sentecho -> . ECHO cond CIERRE
    (90) sentfunc -> . FUNCTION NFUNCTION LPARENT argfunc RPARENT LCURBRACE declaracion_sentencias RCURBRACE
    (15) sentreturn -> . RETURN type CIERRE
    (16) sentreturn -> . RETURN cond CIERRE
    (93) sentfor -> . FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE expsimple RPARENT LCURBRACE declaracion_sentencias RCURBRACE
    (94) sentfor -> . FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE ID PLUS PLUS RPARENT LCURBRACE declaracion_sentencias RCURBRACE
    (95) sentfor -> . FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE ID MINUS MINUS RPARENT LCURBRACE declaracion_sentencias RCURBRACE
    (96) sentwhile -> . WHILE LPARENT cond RPARENT LCURBRACE declaracion_sentencias RCURBRACE
    (97) sentdowhile -> . DO LCURBRACE declaracion_sentencias RCURBRACE WHILE LPARENT cond RPARENT CIERRE

    $end            reduce using rule 5 (declaracion_sentencias -> sentencias .)
    RCURBRACE       reduce using rule 5 (declaracion_sentencias -> sentencias .)
    ID              shift and go to state 15
    NFUNCTION       shift and go to state 16
    IF              shift and go to state 17
    ECHO            shift and go to state 18
    FUNCTION        shift and go to state 19
    RETURN          shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    DO              shift and go to state 23

    sentencias                     shift and go to state 5
    declaracion_sentencias         shift and go to state 26
    sentassign                     shift and go to state 6
    call_function                  shift and go to state 7
    sentif                         shift and go to state 8
    sentecho                       shift and go to state 9
    sentfunc                       shift and go to state 10
    sentreturn                     shift and go to state 11
    sentfor                        shift and go to state 12
    sentwhile                      shift and go to state 13
    sentdowhile                    shift and go to state 14

state 6

    (6) sentencias -> sentassign .

    ID              reduce using rule 6 (sentencias -> sentassign .)
    NFUNCTION       reduce using rule 6 (sentencias -> sentassign .)
    IF              reduce using rule 6 (sentencias -> sentassign .)
    ECHO            reduce using rule 6 (sentencias -> sentassign .)
    FUNCTION        reduce using rule 6 (sentencias -> sentassign .)
    RETURN          reduce using rule 6 (sentencias -> sentassign .)
    FOR             reduce using rule 6 (sentencias -> sentassign .)
    WHILE           reduce using rule 6 (sentencias -> sentassign .)
    DO              reduce using rule 6 (sentencias -> sentassign .)
    $end            reduce using rule 6 (sentencias -> sentassign .)
    RCURBRACE       reduce using rule 6 (sentencias -> sentassign .)


state 7

    (7) sentencias -> call_function . CIERRE

    CIERRE          shift and go to state 27


state 8

    (8) sentencias -> sentif .

    ID              reduce using rule 8 (sentencias -> sentif .)
    NFUNCTION       reduce using rule 8 (sentencias -> sentif .)
    IF              reduce using rule 8 (sentencias -> sentif .)
    ECHO            reduce using rule 8 (sentencias -> sentif .)
    FUNCTION        reduce using rule 8 (sentencias -> sentif .)
    RETURN          reduce using rule 8 (sentencias -> sentif .)
    FOR             reduce using rule 8 (sentencias -> sentif .)
    WHILE           reduce using rule 8 (sentencias -> sentif .)
    DO              reduce using rule 8 (sentencias -> sentif .)
    $end            reduce using rule 8 (sentencias -> sentif .)
    RCURBRACE       reduce using rule 8 (sentencias -> sentif .)


state 9

    (9) sentencias -> sentecho .

    ID              reduce using rule 9 (sentencias -> sentecho .)
    NFUNCTION       reduce using rule 9 (sentencias -> sentecho .)
    IF              reduce using rule 9 (sentencias -> sentecho .)
    ECHO            reduce using rule 9 (sentencias -> sentecho .)
    FUNCTION        reduce using rule 9 (sentencias -> sentecho .)
    RETURN          reduce using rule 9 (sentencias -> sentecho .)
    FOR             reduce using rule 9 (sentencias -> sentecho .)
    WHILE           reduce using rule 9 (sentencias -> sentecho .)
    DO              reduce using rule 9 (sentencias -> sentecho .)
    $end            reduce using rule 9 (sentencias -> sentecho .)
    RCURBRACE       reduce using rule 9 (sentencias -> sentecho .)


state 10

    (10) sentencias -> sentfunc .

    ID              reduce using rule 10 (sentencias -> sentfunc .)
    NFUNCTION       reduce using rule 10 (sentencias -> sentfunc .)
    IF              reduce using rule 10 (sentencias -> sentfunc .)
    ECHO            reduce using rule 10 (sentencias -> sentfunc .)
    FUNCTION        reduce using rule 10 (sentencias -> sentfunc .)
    RETURN          reduce using rule 10 (sentencias -> sentfunc .)
    FOR             reduce using rule 10 (sentencias -> sentfunc .)
    WHILE           reduce using rule 10 (sentencias -> sentfunc .)
    DO              reduce using rule 10 (sentencias -> sentfunc .)
    $end            reduce using rule 10 (sentencias -> sentfunc .)
    RCURBRACE       reduce using rule 10 (sentencias -> sentfunc .)


state 11

    (11) sentencias -> sentreturn .

    ID              reduce using rule 11 (sentencias -> sentreturn .)
    NFUNCTION       reduce using rule 11 (sentencias -> sentreturn .)
    IF              reduce using rule 11 (sentencias -> sentreturn .)
    ECHO            reduce using rule 11 (sentencias -> sentreturn .)
    FUNCTION        reduce using rule 11 (sentencias -> sentreturn .)
    RETURN          reduce using rule 11 (sentencias -> sentreturn .)
    FOR             reduce using rule 11 (sentencias -> sentreturn .)
    WHILE           reduce using rule 11 (sentencias -> sentreturn .)
    DO              reduce using rule 11 (sentencias -> sentreturn .)
    $end            reduce using rule 11 (sentencias -> sentreturn .)
    RCURBRACE       reduce using rule 11 (sentencias -> sentreturn .)


state 12

    (12) sentencias -> sentfor .

    ID              reduce using rule 12 (sentencias -> sentfor .)
    NFUNCTION       reduce using rule 12 (sentencias -> sentfor .)
    IF              reduce using rule 12 (sentencias -> sentfor .)
    ECHO            reduce using rule 12 (sentencias -> sentfor .)
    FUNCTION        reduce using rule 12 (sentencias -> sentfor .)
    RETURN          reduce using rule 12 (sentencias -> sentfor .)
    FOR             reduce using rule 12 (sentencias -> sentfor .)
    WHILE           reduce using rule 12 (sentencias -> sentfor .)
    DO              reduce using rule 12 (sentencias -> sentfor .)
    $end            reduce using rule 12 (sentencias -> sentfor .)
    RCURBRACE       reduce using rule 12 (sentencias -> sentfor .)


state 13

    (13) sentencias -> sentwhile .

    ID              reduce using rule 13 (sentencias -> sentwhile .)
    NFUNCTION       reduce using rule 13 (sentencias -> sentwhile .)
    IF              reduce using rule 13 (sentencias -> sentwhile .)
    ECHO            reduce using rule 13 (sentencias -> sentwhile .)
    FUNCTION        reduce using rule 13 (sentencias -> sentwhile .)
    RETURN          reduce using rule 13 (sentencias -> sentwhile .)
    FOR             reduce using rule 13 (sentencias -> sentwhile .)
    WHILE           reduce using rule 13 (sentencias -> sentwhile .)
    DO              reduce using rule 13 (sentencias -> sentwhile .)
    $end            reduce using rule 13 (sentencias -> sentwhile .)
    RCURBRACE       reduce using rule 13 (sentencias -> sentwhile .)


state 14

    (14) sentencias -> sentdowhile .

    ID              reduce using rule 14 (sentencias -> sentdowhile .)
    NFUNCTION       reduce using rule 14 (sentencias -> sentdowhile .)
    IF              reduce using rule 14 (sentencias -> sentdowhile .)
    ECHO            reduce using rule 14 (sentencias -> sentdowhile .)
    FUNCTION        reduce using rule 14 (sentencias -> sentdowhile .)
    RETURN          reduce using rule 14 (sentencias -> sentdowhile .)
    FOR             reduce using rule 14 (sentencias -> sentdowhile .)
    WHILE           reduce using rule 14 (sentencias -> sentdowhile .)
    DO              reduce using rule 14 (sentencias -> sentdowhile .)
    $end            reduce using rule 14 (sentencias -> sentdowhile .)
    RCURBRACE       reduce using rule 14 (sentencias -> sentdowhile .)


state 15

    (25) sentassign -> ID . EQUAL exp CIERRE
    (26) sentassign -> ID . PLUS PLUS CIERRE
    (27) sentassign -> ID . MINUS MINUS CIERRE

    EQUAL           shift and go to state 28
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30


state 16

    (91) call_function -> NFUNCTION .
    (92) call_function -> NFUNCTION . LPARENT arg RPARENT

    CIERRE          reduce using rule 91 (call_function -> NFUNCTION .)
    TIMES           reduce using rule 91 (call_function -> NFUNCTION .)
    DIV             reduce using rule 91 (call_function -> NFUNCTION .)
    MODULO          reduce using rule 91 (call_function -> NFUNCTION .)
    EXPONENCIACION  reduce using rule 91 (call_function -> NFUNCTION .)
    IGUAL           reduce using rule 91 (call_function -> NFUNCTION .)
    NOIGUAL         reduce using rule 91 (call_function -> NFUNCTION .)
    IDENTICO        reduce using rule 91 (call_function -> NFUNCTION .)
    MAYOR           reduce using rule 91 (call_function -> NFUNCTION .)
    MAYORIG         reduce using rule 91 (call_function -> NFUNCTION .)
    MENOR           reduce using rule 91 (call_function -> NFUNCTION .)
    MENORIG         reduce using rule 91 (call_function -> NFUNCTION .)
    PLUS            reduce using rule 91 (call_function -> NFUNCTION .)
    MINUS           reduce using rule 91 (call_function -> NFUNCTION .)
    AND             reduce using rule 91 (call_function -> NFUNCTION .)
    OR              reduce using rule 91 (call_function -> NFUNCTION .)
    XOR             reduce using rule 91 (call_function -> NFUNCTION .)
    NOT             reduce using rule 91 (call_function -> NFUNCTION .)
    RPARENT         reduce using rule 91 (call_function -> NFUNCTION .)
    COMMA           reduce using rule 91 (call_function -> NFUNCTION .)
    LPARENT         shift and go to state 31


state 17

    (20) sentif -> IF . genif auxsentif
    (24) genif -> . LPARENT cond RPARENT LCURBRACE declaracion_sentencias RCURBRACE

    LPARENT         shift and go to state 33

    genif                          shift and go to state 32

state 18

    (17) sentecho -> ECHO . typevar CIERRE
    (18) sentecho -> ECHO . exp CIERRE
    (19) sentecho -> ECHO . cond CIERRE
    (52) typevar -> . INTEGER
    (53) typevar -> . STRING
    (54) typevar -> . STRINGG
    (55) typevar -> . TRUE
    (56) typevar -> . FALSE
    (34) exp -> . expsimple opcomparacion expsimple
    (35) exp -> . LPARENT expsimple opcomparacion expsimple RPARENT
    (36) exp -> . expsimple
    (63) cond -> . type
    (64) cond -> . cond opcomparacion cond
    (65) cond -> . cond oplogicos cond
    (66) cond -> . LPARENT type RPARENT
    (67) cond -> . LPARENT cond RPARENT
    (44) expsimple -> . expsimple opsuma term
    (45) expsimple -> . term
    (68) type -> . typevar
    (69) type -> . var_declaration_gen
    (46) term -> . term opmult factor
    (47) term -> . factor
    (70) var_declaration_gen -> . ID
    (71) var_declaration_gen -> . ID PLUS PLUS
    (72) var_declaration_gen -> . ID MINUS MINUS
    (73) var_declaration_gen -> . MINUS MINUS ID
    (74) var_declaration_gen -> . PLUS PLUS ID
    (75) var_declaration_gen -> . typevar
    (76) var_declaration_gen -> . exp
    (48) factor -> . INTEGER
    (49) factor -> . ID
    (50) factor -> . call_function
    (51) factor -> . LPARENT expsimple RPARENT
    (91) call_function -> . NFUNCTION
    (92) call_function -> . NFUNCTION LPARENT arg RPARENT

    INTEGER         shift and go to state 37
    STRING          shift and go to state 38
    STRINGG         shift and go to state 39
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    LPARENT         shift and go to state 43
    ID              shift and go to state 48
    MINUS           shift and go to state 50
    PLUS            shift and go to state 49
    NFUNCTION       shift and go to state 16

    typevar                        shift and go to state 34
    exp                            shift and go to state 35
    cond                           shift and go to state 36
    expsimple                      shift and go to state 42
    type                           shift and go to state 44
    term                           shift and go to state 45
    var_declaration_gen            shift and go to state 46
    factor                         shift and go to state 47
    call_function                  shift and go to state 51

state 19

    (90) sentfunc -> FUNCTION . NFUNCTION LPARENT argfunc RPARENT LCURBRACE declaracion_sentencias RCURBRACE

    NFUNCTION       shift and go to state 52


state 20

    (15) sentreturn -> RETURN . type CIERRE
    (16) sentreturn -> RETURN . cond CIERRE
    (68) type -> . typevar
    (69) type -> . var_declaration_gen
    (63) cond -> . type
    (64) cond -> . cond opcomparacion cond
    (65) cond -> . cond oplogicos cond
    (66) cond -> . LPARENT type RPARENT
    (67) cond -> . LPARENT cond RPARENT
    (52) typevar -> . INTEGER
    (53) typevar -> . STRING
    (54) typevar -> . STRINGG
    (55) typevar -> . TRUE
    (56) typevar -> . FALSE
    (70) var_declaration_gen -> . ID
    (71) var_declaration_gen -> . ID PLUS PLUS
    (72) var_declaration_gen -> . ID MINUS MINUS
    (73) var_declaration_gen -> . MINUS MINUS ID
    (74) var_declaration_gen -> . PLUS PLUS ID
    (75) var_declaration_gen -> . typevar
    (76) var_declaration_gen -> . exp
    (34) exp -> . expsimple opcomparacion expsimple
    (35) exp -> . LPARENT expsimple opcomparacion expsimple RPARENT
    (36) exp -> . expsimple
    (44) expsimple -> . expsimple opsuma term
    (45) expsimple -> . term
    (46) term -> . term opmult factor
    (47) term -> . factor
    (48) factor -> . INTEGER
    (49) factor -> . ID
    (50) factor -> . call_function
    (51) factor -> . LPARENT expsimple RPARENT
    (91) call_function -> . NFUNCTION
    (92) call_function -> . NFUNCTION LPARENT arg RPARENT

    LPARENT         shift and go to state 56
    INTEGER         shift and go to state 37
    STRING          shift and go to state 38
    STRINGG         shift and go to state 39
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    ID              shift and go to state 48
    MINUS           shift and go to state 50
    PLUS            shift and go to state 49
    NFUNCTION       shift and go to state 16

    type                           shift and go to state 53
    cond                           shift and go to state 54
    typevar                        shift and go to state 55
    var_declaration_gen            shift and go to state 46
    exp                            shift and go to state 57
    expsimple                      shift and go to state 42
    term                           shift and go to state 45
    factor                         shift and go to state 47
    call_function                  shift and go to state 51

state 21

    (93) sentfor -> FOR . LPARENT ID EQUAL expsimple CIERRE cond CIERRE expsimple RPARENT LCURBRACE declaracion_sentencias RCURBRACE
    (94) sentfor -> FOR . LPARENT ID EQUAL expsimple CIERRE cond CIERRE ID PLUS PLUS RPARENT LCURBRACE declaracion_sentencias RCURBRACE
    (95) sentfor -> FOR . LPARENT ID EQUAL expsimple CIERRE cond CIERRE ID MINUS MINUS RPARENT LCURBRACE declaracion_sentencias RCURBRACE

    LPARENT         shift and go to state 58


state 22

    (96) sentwhile -> WHILE . LPARENT cond RPARENT LCURBRACE declaracion_sentencias RCURBRACE

    LPARENT         shift and go to state 59


state 23

    (97) sentdowhile -> DO . LCURBRACE declaracion_sentencias RCURBRACE WHILE LPARENT cond RPARENT CIERRE

    LCURBRACE       shift and go to state 60


state 24

    (1) program -> import declaracion_sentencias .

    $end            reduce using rule 1 (program -> import declaracion_sentencias .)


state 25

    (98) import -> INCLUDE STRINGG . CIERRE

    CIERRE          shift and go to state 61


state 26

    (4) declaracion_sentencias -> sentencias declaracion_sentencias .

    $end            reduce using rule 4 (declaracion_sentencias -> sentencias declaracion_sentencias .)
    RCURBRACE       reduce using rule 4 (declaracion_sentencias -> sentencias declaracion_sentencias .)


state 27

    (7) sentencias -> call_function CIERRE .

    ID              reduce using rule 7 (sentencias -> call_function CIERRE .)
    NFUNCTION       reduce using rule 7 (sentencias -> call_function CIERRE .)
    IF              reduce using rule 7 (sentencias -> call_function CIERRE .)
    ECHO            reduce using rule 7 (sentencias -> call_function CIERRE .)
    FUNCTION        reduce using rule 7 (sentencias -> call_function CIERRE .)
    RETURN          reduce using rule 7 (sentencias -> call_function CIERRE .)
    FOR             reduce using rule 7 (sentencias -> call_function CIERRE .)
    WHILE           reduce using rule 7 (sentencias -> call_function CIERRE .)
    DO              reduce using rule 7 (sentencias -> call_function CIERRE .)
    $end            reduce using rule 7 (sentencias -> call_function CIERRE .)
    RCURBRACE       reduce using rule 7 (sentencias -> call_function CIERRE .)


state 28

    (25) sentassign -> ID EQUAL . exp CIERRE
    (34) exp -> . expsimple opcomparacion expsimple
    (35) exp -> . LPARENT expsimple opcomparacion expsimple RPARENT
    (36) exp -> . expsimple
    (44) expsimple -> . expsimple opsuma term
    (45) expsimple -> . term
    (46) term -> . term opmult factor
    (47) term -> . factor
    (48) factor -> . INTEGER
    (49) factor -> . ID
    (50) factor -> . call_function
    (51) factor -> . LPARENT expsimple RPARENT
    (91) call_function -> . NFUNCTION
    (92) call_function -> . NFUNCTION LPARENT arg RPARENT

    LPARENT         shift and go to state 64
    INTEGER         shift and go to state 65
    ID              shift and go to state 62
    NFUNCTION       shift and go to state 16

    exp                            shift and go to state 63
    expsimple                      shift and go to state 42
    term                           shift and go to state 45
    factor                         shift and go to state 47
    call_function                  shift and go to state 51

state 29

    (26) sentassign -> ID PLUS . PLUS CIERRE

    PLUS            shift and go to state 66


state 30

    (27) sentassign -> ID MINUS . MINUS CIERRE

    MINUS           shift and go to state 67


state 31

    (92) call_function -> NFUNCTION LPARENT . arg RPARENT
    (77) arg -> . var_declaration_gen
    (78) arg -> . type
    (79) arg -> . expsimple
    (80) arg -> . type COMMA arg
    (81) arg -> . STRING
    (82) arg -> . STRINGG
    (83) arg -> . var_declaration_gen COMMA arg
    (84) arg -> . STRING COMMA arg
    (85) arg -> . STRINGG COMMA arg
    (86) arg -> .
    (70) var_declaration_gen -> . ID
    (71) var_declaration_gen -> . ID PLUS PLUS
    (72) var_declaration_gen -> . ID MINUS MINUS
    (73) var_declaration_gen -> . MINUS MINUS ID
    (74) var_declaration_gen -> . PLUS PLUS ID
    (75) var_declaration_gen -> . typevar
    (76) var_declaration_gen -> . exp
    (68) type -> . typevar
    (69) type -> . var_declaration_gen
    (44) expsimple -> . expsimple opsuma term
    (45) expsimple -> . term
    (52) typevar -> . INTEGER
    (53) typevar -> . STRING
    (54) typevar -> . STRINGG
    (55) typevar -> . TRUE
    (56) typevar -> . FALSE
    (34) exp -> . expsimple opcomparacion expsimple
    (35) exp -> . LPARENT expsimple opcomparacion expsimple RPARENT
    (36) exp -> . expsimple
    (46) term -> . term opmult factor
    (47) term -> . factor
    (48) factor -> . INTEGER
    (49) factor -> . ID
    (50) factor -> . call_function
    (51) factor -> . LPARENT expsimple RPARENT
    (91) call_function -> . NFUNCTION
    (92) call_function -> . NFUNCTION LPARENT arg RPARENT

    STRING          shift and go to state 72
    STRINGG         shift and go to state 73
    RPARENT         reduce using rule 86 (arg -> .)
    ID              shift and go to state 48
    MINUS           shift and go to state 50
    PLUS            shift and go to state 49
    INTEGER         shift and go to state 37
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    LPARENT         shift and go to state 64
    NFUNCTION       shift and go to state 16

    arg                            shift and go to state 68
    var_declaration_gen            shift and go to state 69
    type                           shift and go to state 70
    expsimple                      shift and go to state 71
    typevar                        shift and go to state 74
    exp                            shift and go to state 57
    term                           shift and go to state 45
    factor                         shift and go to state 47
    call_function                  shift and go to state 51

state 32

    (20) sentif -> IF genif . auxsentif
    (21) auxsentif -> . ELSE IF genif auxsentif
    (22) auxsentif -> . ELSE LCURBRACE declaracion_sentencias RCURBRACE
    (23) auxsentif -> . empty
    (99) empty -> .

    ELSE            shift and go to state 76
    ID              reduce using rule 99 (empty -> .)
    NFUNCTION       reduce using rule 99 (empty -> .)
    IF              reduce using rule 99 (empty -> .)
    ECHO            reduce using rule 99 (empty -> .)
    FUNCTION        reduce using rule 99 (empty -> .)
    RETURN          reduce using rule 99 (empty -> .)
    FOR             reduce using rule 99 (empty -> .)
    WHILE           reduce using rule 99 (empty -> .)
    DO              reduce using rule 99 (empty -> .)
    $end            reduce using rule 99 (empty -> .)
    RCURBRACE       reduce using rule 99 (empty -> .)

    auxsentif                      shift and go to state 75
    empty                          shift and go to state 77

state 33

    (24) genif -> LPARENT . cond RPARENT LCURBRACE declaracion_sentencias RCURBRACE
    (63) cond -> . type
    (64) cond -> . cond opcomparacion cond
    (65) cond -> . cond oplogicos cond
    (66) cond -> . LPARENT type RPARENT
    (67) cond -> . LPARENT cond RPARENT
    (68) type -> . typevar
    (69) type -> . var_declaration_gen
    (52) typevar -> . INTEGER
    (53) typevar -> . STRING
    (54) typevar -> . STRINGG
    (55) typevar -> . TRUE
    (56) typevar -> . FALSE
    (70) var_declaration_gen -> . ID
    (71) var_declaration_gen -> . ID PLUS PLUS
    (72) var_declaration_gen -> . ID MINUS MINUS
    (73) var_declaration_gen -> . MINUS MINUS ID
    (74) var_declaration_gen -> . PLUS PLUS ID
    (75) var_declaration_gen -> . typevar
    (76) var_declaration_gen -> . exp
    (34) exp -> . expsimple opcomparacion expsimple
    (35) exp -> . LPARENT expsimple opcomparacion expsimple RPARENT
    (36) exp -> . expsimple
    (44) expsimple -> . expsimple opsuma term
    (45) expsimple -> . term
    (46) term -> . term opmult factor
    (47) term -> . factor
    (48) factor -> . INTEGER
    (49) factor -> . ID
    (50) factor -> . call_function
    (51) factor -> . LPARENT expsimple RPARENT
    (91) call_function -> . NFUNCTION
    (92) call_function -> . NFUNCTION LPARENT arg RPARENT

    LPARENT         shift and go to state 56
    INTEGER         shift and go to state 37
    STRING          shift and go to state 38
    STRINGG         shift and go to state 39
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    ID              shift and go to state 48
    MINUS           shift and go to state 50
    PLUS            shift and go to state 49
    NFUNCTION       shift and go to state 16

    cond                           shift and go to state 78
    type                           shift and go to state 44
    typevar                        shift and go to state 55
    var_declaration_gen            shift and go to state 46
    exp                            shift and go to state 57
    expsimple                      shift and go to state 42
    term                           shift and go to state 45
    factor                         shift and go to state 47
    call_function                  shift and go to state 51

state 34

    (17) sentecho -> ECHO typevar . CIERRE
    (68) type -> typevar .
    (75) var_declaration_gen -> typevar .

  ! shift/reduce conflict for CIERRE resolved as shift
  ! shift/reduce conflict for CIERRE resolved as shift
  ! reduce/reduce conflict for IGUAL resolved using rule 68 (type -> typevar .)
  ! reduce/reduce conflict for NOIGUAL resolved using rule 68 (type -> typevar .)
  ! reduce/reduce conflict for IDENTICO resolved using rule 68 (type -> typevar .)
  ! reduce/reduce conflict for MAYOR resolved using rule 68 (type -> typevar .)
  ! reduce/reduce conflict for MAYORIG resolved using rule 68 (type -> typevar .)
  ! reduce/reduce conflict for MENOR resolved using rule 68 (type -> typevar .)
  ! reduce/reduce conflict for MENORIG resolved using rule 68 (type -> typevar .)
  ! reduce/reduce conflict for AND resolved using rule 68 (type -> typevar .)
  ! reduce/reduce conflict for OR resolved using rule 68 (type -> typevar .)
  ! reduce/reduce conflict for XOR resolved using rule 68 (type -> typevar .)
  ! reduce/reduce conflict for NOT resolved using rule 68 (type -> typevar .)
    CIERRE          shift and go to state 79
    IGUAL           reduce using rule 68 (type -> typevar .)
    NOIGUAL         reduce using rule 68 (type -> typevar .)
    IDENTICO        reduce using rule 68 (type -> typevar .)
    MAYOR           reduce using rule 68 (type -> typevar .)
    MAYORIG         reduce using rule 68 (type -> typevar .)
    MENOR           reduce using rule 68 (type -> typevar .)
    MENORIG         reduce using rule 68 (type -> typevar .)
    AND             reduce using rule 68 (type -> typevar .)
    OR              reduce using rule 68 (type -> typevar .)
    XOR             reduce using rule 68 (type -> typevar .)
    NOT             reduce using rule 68 (type -> typevar .)

  ! CIERRE          [ reduce using rule 68 (type -> typevar .) ]
  ! CIERRE          [ reduce using rule 75 (var_declaration_gen -> typevar .) ]
  ! IGUAL           [ reduce using rule 75 (var_declaration_gen -> typevar .) ]
  ! NOIGUAL         [ reduce using rule 75 (var_declaration_gen -> typevar .) ]
  ! IDENTICO        [ reduce using rule 75 (var_declaration_gen -> typevar .) ]
  ! MAYOR           [ reduce using rule 75 (var_declaration_gen -> typevar .) ]
  ! MAYORIG         [ reduce using rule 75 (var_declaration_gen -> typevar .) ]
  ! MENOR           [ reduce using rule 75 (var_declaration_gen -> typevar .) ]
  ! MENORIG         [ reduce using rule 75 (var_declaration_gen -> typevar .) ]
  ! AND             [ reduce using rule 75 (var_declaration_gen -> typevar .) ]
  ! OR              [ reduce using rule 75 (var_declaration_gen -> typevar .) ]
  ! XOR             [ reduce using rule 75 (var_declaration_gen -> typevar .) ]
  ! NOT             [ reduce using rule 75 (var_declaration_gen -> typevar .) ]


state 35

    (18) sentecho -> ECHO exp . CIERRE
    (76) var_declaration_gen -> exp .

  ! shift/reduce conflict for CIERRE resolved as shift
    CIERRE          shift and go to state 80
    IGUAL           reduce using rule 76 (var_declaration_gen -> exp .)
    NOIGUAL         reduce using rule 76 (var_declaration_gen -> exp .)
    IDENTICO        reduce using rule 76 (var_declaration_gen -> exp .)
    MAYOR           reduce using rule 76 (var_declaration_gen -> exp .)
    MAYORIG         reduce using rule 76 (var_declaration_gen -> exp .)
    MENOR           reduce using rule 76 (var_declaration_gen -> exp .)
    MENORIG         reduce using rule 76 (var_declaration_gen -> exp .)
    AND             reduce using rule 76 (var_declaration_gen -> exp .)
    OR              reduce using rule 76 (var_declaration_gen -> exp .)
    XOR             reduce using rule 76 (var_declaration_gen -> exp .)
    NOT             reduce using rule 76 (var_declaration_gen -> exp .)

  ! CIERRE          [ reduce using rule 76 (var_declaration_gen -> exp .) ]


state 36

    (19) sentecho -> ECHO cond . CIERRE
    (64) cond -> cond . opcomparacion cond
    (65) cond -> cond . oplogicos cond
    (37) opcomparacion -> . IGUAL
    (38) opcomparacion -> . NOIGUAL
    (39) opcomparacion -> . IDENTICO
    (40) opcomparacion -> . MAYOR
    (41) opcomparacion -> . MAYORIG
    (42) opcomparacion -> . MENOR
    (43) opcomparacion -> . MENORIG
    (30) oplogicos -> . AND
    (31) oplogicos -> . OR
    (32) oplogicos -> . XOR
    (33) oplogicos -> . NOT

    CIERRE          shift and go to state 81
    IGUAL           shift and go to state 84
    NOIGUAL         shift and go to state 85
    IDENTICO        shift and go to state 86
    MAYOR           shift and go to state 87
    MAYORIG         shift and go to state 88
    MENOR           shift and go to state 89
    MENORIG         shift and go to state 90
    AND             shift and go to state 91
    OR              shift and go to state 92
    XOR             shift and go to state 93
    NOT             shift and go to state 94

    opcomparacion                  shift and go to state 82
    oplogicos                      shift and go to state 83

state 37

    (52) typevar -> INTEGER .
    (48) factor -> INTEGER .

  ! reduce/reduce conflict for IGUAL resolved using rule 48 (factor -> INTEGER .)
  ! reduce/reduce conflict for NOIGUAL resolved using rule 48 (factor -> INTEGER .)
  ! reduce/reduce conflict for IDENTICO resolved using rule 48 (factor -> INTEGER .)
  ! reduce/reduce conflict for MAYOR resolved using rule 48 (factor -> INTEGER .)
  ! reduce/reduce conflict for MAYORIG resolved using rule 48 (factor -> INTEGER .)
  ! reduce/reduce conflict for MENOR resolved using rule 48 (factor -> INTEGER .)
  ! reduce/reduce conflict for MENORIG resolved using rule 48 (factor -> INTEGER .)
  ! reduce/reduce conflict for CIERRE resolved using rule 48 (factor -> INTEGER .)
  ! reduce/reduce conflict for AND resolved using rule 48 (factor -> INTEGER .)
  ! reduce/reduce conflict for OR resolved using rule 48 (factor -> INTEGER .)
  ! reduce/reduce conflict for XOR resolved using rule 48 (factor -> INTEGER .)
  ! reduce/reduce conflict for NOT resolved using rule 48 (factor -> INTEGER .)
  ! reduce/reduce conflict for RPARENT resolved using rule 48 (factor -> INTEGER .)
  ! reduce/reduce conflict for COMMA resolved using rule 48 (factor -> INTEGER .)
    TIMES           reduce using rule 48 (factor -> INTEGER .)
    DIV             reduce using rule 48 (factor -> INTEGER .)
    MODULO          reduce using rule 48 (factor -> INTEGER .)
    EXPONENCIACION  reduce using rule 48 (factor -> INTEGER .)
    IGUAL           reduce using rule 48 (factor -> INTEGER .)
    NOIGUAL         reduce using rule 48 (factor -> INTEGER .)
    IDENTICO        reduce using rule 48 (factor -> INTEGER .)
    MAYOR           reduce using rule 48 (factor -> INTEGER .)
    MAYORIG         reduce using rule 48 (factor -> INTEGER .)
    MENOR           reduce using rule 48 (factor -> INTEGER .)
    MENORIG         reduce using rule 48 (factor -> INTEGER .)
    PLUS            reduce using rule 48 (factor -> INTEGER .)
    MINUS           reduce using rule 48 (factor -> INTEGER .)
    CIERRE          reduce using rule 48 (factor -> INTEGER .)
    AND             reduce using rule 48 (factor -> INTEGER .)
    OR              reduce using rule 48 (factor -> INTEGER .)
    XOR             reduce using rule 48 (factor -> INTEGER .)
    NOT             reduce using rule 48 (factor -> INTEGER .)
    RPARENT         reduce using rule 48 (factor -> INTEGER .)
    COMMA           reduce using rule 48 (factor -> INTEGER .)

  ! CIERRE          [ reduce using rule 52 (typevar -> INTEGER .) ]
  ! IGUAL           [ reduce using rule 52 (typevar -> INTEGER .) ]
  ! NOIGUAL         [ reduce using rule 52 (typevar -> INTEGER .) ]
  ! IDENTICO        [ reduce using rule 52 (typevar -> INTEGER .) ]
  ! MAYOR           [ reduce using rule 52 (typevar -> INTEGER .) ]
  ! MAYORIG         [ reduce using rule 52 (typevar -> INTEGER .) ]
  ! MENOR           [ reduce using rule 52 (typevar -> INTEGER .) ]
  ! MENORIG         [ reduce using rule 52 (typevar -> INTEGER .) ]
  ! AND             [ reduce using rule 52 (typevar -> INTEGER .) ]
  ! OR              [ reduce using rule 52 (typevar -> INTEGER .) ]
  ! XOR             [ reduce using rule 52 (typevar -> INTEGER .) ]
  ! NOT             [ reduce using rule 52 (typevar -> INTEGER .) ]
  ! COMMA           [ reduce using rule 52 (typevar -> INTEGER .) ]
  ! RPARENT         [ reduce using rule 52 (typevar -> INTEGER .) ]


state 38

    (53) typevar -> STRING .

    CIERRE          reduce using rule 53 (typevar -> STRING .)
    IGUAL           reduce using rule 53 (typevar -> STRING .)
    NOIGUAL         reduce using rule 53 (typevar -> STRING .)
    IDENTICO        reduce using rule 53 (typevar -> STRING .)
    MAYOR           reduce using rule 53 (typevar -> STRING .)
    MAYORIG         reduce using rule 53 (typevar -> STRING .)
    MENOR           reduce using rule 53 (typevar -> STRING .)
    MENORIG         reduce using rule 53 (typevar -> STRING .)
    AND             reduce using rule 53 (typevar -> STRING .)
    OR              reduce using rule 53 (typevar -> STRING .)
    XOR             reduce using rule 53 (typevar -> STRING .)
    NOT             reduce using rule 53 (typevar -> STRING .)
    RPARENT         reduce using rule 53 (typevar -> STRING .)


state 39

    (54) typevar -> STRINGG .

    CIERRE          reduce using rule 54 (typevar -> STRINGG .)
    IGUAL           reduce using rule 54 (typevar -> STRINGG .)
    NOIGUAL         reduce using rule 54 (typevar -> STRINGG .)
    IDENTICO        reduce using rule 54 (typevar -> STRINGG .)
    MAYOR           reduce using rule 54 (typevar -> STRINGG .)
    MAYORIG         reduce using rule 54 (typevar -> STRINGG .)
    MENOR           reduce using rule 54 (typevar -> STRINGG .)
    MENORIG         reduce using rule 54 (typevar -> STRINGG .)
    AND             reduce using rule 54 (typevar -> STRINGG .)
    OR              reduce using rule 54 (typevar -> STRINGG .)
    XOR             reduce using rule 54 (typevar -> STRINGG .)
    NOT             reduce using rule 54 (typevar -> STRINGG .)
    RPARENT         reduce using rule 54 (typevar -> STRINGG .)


state 40

    (55) typevar -> TRUE .

    CIERRE          reduce using rule 55 (typevar -> TRUE .)
    IGUAL           reduce using rule 55 (typevar -> TRUE .)
    NOIGUAL         reduce using rule 55 (typevar -> TRUE .)
    IDENTICO        reduce using rule 55 (typevar -> TRUE .)
    MAYOR           reduce using rule 55 (typevar -> TRUE .)
    MAYORIG         reduce using rule 55 (typevar -> TRUE .)
    MENOR           reduce using rule 55 (typevar -> TRUE .)
    MENORIG         reduce using rule 55 (typevar -> TRUE .)
    AND             reduce using rule 55 (typevar -> TRUE .)
    OR              reduce using rule 55 (typevar -> TRUE .)
    XOR             reduce using rule 55 (typevar -> TRUE .)
    NOT             reduce using rule 55 (typevar -> TRUE .)
    COMMA           reduce using rule 55 (typevar -> TRUE .)
    RPARENT         reduce using rule 55 (typevar -> TRUE .)


state 41

    (56) typevar -> FALSE .

    CIERRE          reduce using rule 56 (typevar -> FALSE .)
    IGUAL           reduce using rule 56 (typevar -> FALSE .)
    NOIGUAL         reduce using rule 56 (typevar -> FALSE .)
    IDENTICO        reduce using rule 56 (typevar -> FALSE .)
    MAYOR           reduce using rule 56 (typevar -> FALSE .)
    MAYORIG         reduce using rule 56 (typevar -> FALSE .)
    MENOR           reduce using rule 56 (typevar -> FALSE .)
    MENORIG         reduce using rule 56 (typevar -> FALSE .)
    AND             reduce using rule 56 (typevar -> FALSE .)
    OR              reduce using rule 56 (typevar -> FALSE .)
    XOR             reduce using rule 56 (typevar -> FALSE .)
    NOT             reduce using rule 56 (typevar -> FALSE .)
    COMMA           reduce using rule 56 (typevar -> FALSE .)
    RPARENT         reduce using rule 56 (typevar -> FALSE .)


state 42

    (34) exp -> expsimple . opcomparacion expsimple
    (36) exp -> expsimple .
    (44) expsimple -> expsimple . opsuma term
    (37) opcomparacion -> . IGUAL
    (38) opcomparacion -> . NOIGUAL
    (39) opcomparacion -> . IDENTICO
    (40) opcomparacion -> . MAYOR
    (41) opcomparacion -> . MAYORIG
    (42) opcomparacion -> . MENOR
    (43) opcomparacion -> . MENORIG
    (57) opsuma -> . PLUS
    (58) opsuma -> . MINUS

  ! shift/reduce conflict for IGUAL resolved as shift
  ! shift/reduce conflict for NOIGUAL resolved as shift
  ! shift/reduce conflict for IDENTICO resolved as shift
  ! shift/reduce conflict for MAYOR resolved as shift
  ! shift/reduce conflict for MAYORIG resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for MENORIG resolved as shift
    CIERRE          reduce using rule 36 (exp -> expsimple .)
    AND             reduce using rule 36 (exp -> expsimple .)
    OR              reduce using rule 36 (exp -> expsimple .)
    XOR             reduce using rule 36 (exp -> expsimple .)
    NOT             reduce using rule 36 (exp -> expsimple .)
    RPARENT         reduce using rule 36 (exp -> expsimple .)
    IGUAL           shift and go to state 84
    NOIGUAL         shift and go to state 85
    IDENTICO        shift and go to state 86
    MAYOR           shift and go to state 87
    MAYORIG         shift and go to state 88
    MENOR           shift and go to state 89
    MENORIG         shift and go to state 90
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98

  ! IGUAL           [ reduce using rule 36 (exp -> expsimple .) ]
  ! NOIGUAL         [ reduce using rule 36 (exp -> expsimple .) ]
  ! IDENTICO        [ reduce using rule 36 (exp -> expsimple .) ]
  ! MAYOR           [ reduce using rule 36 (exp -> expsimple .) ]
  ! MAYORIG         [ reduce using rule 36 (exp -> expsimple .) ]
  ! MENOR           [ reduce using rule 36 (exp -> expsimple .) ]
  ! MENORIG         [ reduce using rule 36 (exp -> expsimple .) ]

    opcomparacion                  shift and go to state 95
    opsuma                         shift and go to state 96

state 43

    (35) exp -> LPARENT . expsimple opcomparacion expsimple RPARENT
    (66) cond -> LPARENT . type RPARENT
    (67) cond -> LPARENT . cond RPARENT
    (51) factor -> LPARENT . expsimple RPARENT
    (44) expsimple -> . expsimple opsuma term
    (45) expsimple -> . term
    (68) type -> . typevar
    (69) type -> . var_declaration_gen
    (63) cond -> . type
    (64) cond -> . cond opcomparacion cond
    (65) cond -> . cond oplogicos cond
    (66) cond -> . LPARENT type RPARENT
    (67) cond -> . LPARENT cond RPARENT
    (46) term -> . term opmult factor
    (47) term -> . factor
    (52) typevar -> . INTEGER
    (53) typevar -> . STRING
    (54) typevar -> . STRINGG
    (55) typevar -> . TRUE
    (56) typevar -> . FALSE
    (70) var_declaration_gen -> . ID
    (71) var_declaration_gen -> . ID PLUS PLUS
    (72) var_declaration_gen -> . ID MINUS MINUS
    (73) var_declaration_gen -> . MINUS MINUS ID
    (74) var_declaration_gen -> . PLUS PLUS ID
    (75) var_declaration_gen -> . typevar
    (76) var_declaration_gen -> . exp
    (48) factor -> . INTEGER
    (49) factor -> . ID
    (50) factor -> . call_function
    (51) factor -> . LPARENT expsimple RPARENT
    (34) exp -> . expsimple opcomparacion expsimple
    (35) exp -> . LPARENT expsimple opcomparacion expsimple RPARENT
    (36) exp -> . expsimple
    (91) call_function -> . NFUNCTION
    (92) call_function -> . NFUNCTION LPARENT arg RPARENT

    LPARENT         shift and go to state 99
    INTEGER         shift and go to state 37
    STRING          shift and go to state 38
    STRINGG         shift and go to state 39
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    ID              shift and go to state 48
    MINUS           shift and go to state 50
    PLUS            shift and go to state 49
    NFUNCTION       shift and go to state 16

    expsimple                      shift and go to state 100
    type                           shift and go to state 101
    cond                           shift and go to state 102
    term                           shift and go to state 45
    typevar                        shift and go to state 55
    var_declaration_gen            shift and go to state 46
    factor                         shift and go to state 47
    exp                            shift and go to state 57
    call_function                  shift and go to state 51

state 44

    (63) cond -> type .

    CIERRE          reduce using rule 63 (cond -> type .)
    IGUAL           reduce using rule 63 (cond -> type .)
    NOIGUAL         reduce using rule 63 (cond -> type .)
    IDENTICO        reduce using rule 63 (cond -> type .)
    MAYOR           reduce using rule 63 (cond -> type .)
    MAYORIG         reduce using rule 63 (cond -> type .)
    MENOR           reduce using rule 63 (cond -> type .)
    MENORIG         reduce using rule 63 (cond -> type .)
    AND             reduce using rule 63 (cond -> type .)
    OR              reduce using rule 63 (cond -> type .)
    XOR             reduce using rule 63 (cond -> type .)
    NOT             reduce using rule 63 (cond -> type .)
    RPARENT         reduce using rule 63 (cond -> type .)


state 45

    (45) expsimple -> term .
    (46) term -> term . opmult factor
    (59) opmult -> . TIMES
    (60) opmult -> . DIV
    (61) opmult -> . MODULO
    (62) opmult -> . EXPONENCIACION

    IGUAL           reduce using rule 45 (expsimple -> term .)
    NOIGUAL         reduce using rule 45 (expsimple -> term .)
    IDENTICO        reduce using rule 45 (expsimple -> term .)
    MAYOR           reduce using rule 45 (expsimple -> term .)
    MAYORIG         reduce using rule 45 (expsimple -> term .)
    MENOR           reduce using rule 45 (expsimple -> term .)
    MENORIG         reduce using rule 45 (expsimple -> term .)
    PLUS            reduce using rule 45 (expsimple -> term .)
    MINUS           reduce using rule 45 (expsimple -> term .)
    CIERRE          reduce using rule 45 (expsimple -> term .)
    AND             reduce using rule 45 (expsimple -> term .)
    OR              reduce using rule 45 (expsimple -> term .)
    XOR             reduce using rule 45 (expsimple -> term .)
    NOT             reduce using rule 45 (expsimple -> term .)
    RPARENT         reduce using rule 45 (expsimple -> term .)
    COMMA           reduce using rule 45 (expsimple -> term .)
    TIMES           shift and go to state 104
    DIV             shift and go to state 105
    MODULO          shift and go to state 106
    EXPONENCIACION  shift and go to state 107

    opmult                         shift and go to state 103

state 46

    (69) type -> var_declaration_gen .

    CIERRE          reduce using rule 69 (type -> var_declaration_gen .)
    IGUAL           reduce using rule 69 (type -> var_declaration_gen .)
    NOIGUAL         reduce using rule 69 (type -> var_declaration_gen .)
    IDENTICO        reduce using rule 69 (type -> var_declaration_gen .)
    MAYOR           reduce using rule 69 (type -> var_declaration_gen .)
    MAYORIG         reduce using rule 69 (type -> var_declaration_gen .)
    MENOR           reduce using rule 69 (type -> var_declaration_gen .)
    MENORIG         reduce using rule 69 (type -> var_declaration_gen .)
    AND             reduce using rule 69 (type -> var_declaration_gen .)
    OR              reduce using rule 69 (type -> var_declaration_gen .)
    XOR             reduce using rule 69 (type -> var_declaration_gen .)
    NOT             reduce using rule 69 (type -> var_declaration_gen .)
    RPARENT         reduce using rule 69 (type -> var_declaration_gen .)


state 47

    (47) term -> factor .

    TIMES           reduce using rule 47 (term -> factor .)
    DIV             reduce using rule 47 (term -> factor .)
    MODULO          reduce using rule 47 (term -> factor .)
    EXPONENCIACION  reduce using rule 47 (term -> factor .)
    IGUAL           reduce using rule 47 (term -> factor .)
    NOIGUAL         reduce using rule 47 (term -> factor .)
    IDENTICO        reduce using rule 47 (term -> factor .)
    MAYOR           reduce using rule 47 (term -> factor .)
    MAYORIG         reduce using rule 47 (term -> factor .)
    MENOR           reduce using rule 47 (term -> factor .)
    MENORIG         reduce using rule 47 (term -> factor .)
    PLUS            reduce using rule 47 (term -> factor .)
    MINUS           reduce using rule 47 (term -> factor .)
    CIERRE          reduce using rule 47 (term -> factor .)
    AND             reduce using rule 47 (term -> factor .)
    OR              reduce using rule 47 (term -> factor .)
    XOR             reduce using rule 47 (term -> factor .)
    NOT             reduce using rule 47 (term -> factor .)
    RPARENT         reduce using rule 47 (term -> factor .)
    COMMA           reduce using rule 47 (term -> factor .)


state 48

    (70) var_declaration_gen -> ID .
    (71) var_declaration_gen -> ID . PLUS PLUS
    (72) var_declaration_gen -> ID . MINUS MINUS
    (49) factor -> ID .

  ! reduce/reduce conflict for IGUAL resolved using rule 49 (factor -> ID .)
  ! reduce/reduce conflict for NOIGUAL resolved using rule 49 (factor -> ID .)
  ! reduce/reduce conflict for IDENTICO resolved using rule 49 (factor -> ID .)
  ! reduce/reduce conflict for MAYOR resolved using rule 49 (factor -> ID .)
  ! reduce/reduce conflict for MAYORIG resolved using rule 49 (factor -> ID .)
  ! reduce/reduce conflict for MENOR resolved using rule 49 (factor -> ID .)
  ! reduce/reduce conflict for MENORIG resolved using rule 49 (factor -> ID .)
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! reduce/reduce conflict for CIERRE resolved using rule 49 (factor -> ID .)
  ! reduce/reduce conflict for AND resolved using rule 49 (factor -> ID .)
  ! reduce/reduce conflict for OR resolved using rule 49 (factor -> ID .)
  ! reduce/reduce conflict for XOR resolved using rule 49 (factor -> ID .)
  ! reduce/reduce conflict for NOT resolved using rule 49 (factor -> ID .)
  ! reduce/reduce conflict for RPARENT resolved using rule 49 (factor -> ID .)
  ! reduce/reduce conflict for COMMA resolved using rule 49 (factor -> ID .)
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109
    TIMES           reduce using rule 49 (factor -> ID .)
    DIV             reduce using rule 49 (factor -> ID .)
    MODULO          reduce using rule 49 (factor -> ID .)
    EXPONENCIACION  reduce using rule 49 (factor -> ID .)
    IGUAL           reduce using rule 49 (factor -> ID .)
    NOIGUAL         reduce using rule 49 (factor -> ID .)
    IDENTICO        reduce using rule 49 (factor -> ID .)
    MAYOR           reduce using rule 49 (factor -> ID .)
    MAYORIG         reduce using rule 49 (factor -> ID .)
    MENOR           reduce using rule 49 (factor -> ID .)
    MENORIG         reduce using rule 49 (factor -> ID .)
    CIERRE          reduce using rule 49 (factor -> ID .)
    AND             reduce using rule 49 (factor -> ID .)
    OR              reduce using rule 49 (factor -> ID .)
    XOR             reduce using rule 49 (factor -> ID .)
    NOT             reduce using rule 49 (factor -> ID .)
    RPARENT         reduce using rule 49 (factor -> ID .)
    COMMA           reduce using rule 49 (factor -> ID .)

  ! CIERRE          [ reduce using rule 70 (var_declaration_gen -> ID .) ]
  ! IGUAL           [ reduce using rule 70 (var_declaration_gen -> ID .) ]
  ! NOIGUAL         [ reduce using rule 70 (var_declaration_gen -> ID .) ]
  ! IDENTICO        [ reduce using rule 70 (var_declaration_gen -> ID .) ]
  ! MAYOR           [ reduce using rule 70 (var_declaration_gen -> ID .) ]
  ! MAYORIG         [ reduce using rule 70 (var_declaration_gen -> ID .) ]
  ! MENOR           [ reduce using rule 70 (var_declaration_gen -> ID .) ]
  ! MENORIG         [ reduce using rule 70 (var_declaration_gen -> ID .) ]
  ! AND             [ reduce using rule 70 (var_declaration_gen -> ID .) ]
  ! OR              [ reduce using rule 70 (var_declaration_gen -> ID .) ]
  ! XOR             [ reduce using rule 70 (var_declaration_gen -> ID .) ]
  ! NOT             [ reduce using rule 70 (var_declaration_gen -> ID .) ]
  ! COMMA           [ reduce using rule 70 (var_declaration_gen -> ID .) ]
  ! RPARENT         [ reduce using rule 70 (var_declaration_gen -> ID .) ]
  ! PLUS            [ reduce using rule 49 (factor -> ID .) ]
  ! MINUS           [ reduce using rule 49 (factor -> ID .) ]


state 49

    (74) var_declaration_gen -> PLUS . PLUS ID

    PLUS            shift and go to state 110


state 50

    (73) var_declaration_gen -> MINUS . MINUS ID

    MINUS           shift and go to state 111


state 51

    (50) factor -> call_function .

    TIMES           reduce using rule 50 (factor -> call_function .)
    DIV             reduce using rule 50 (factor -> call_function .)
    MODULO          reduce using rule 50 (factor -> call_function .)
    EXPONENCIACION  reduce using rule 50 (factor -> call_function .)
    IGUAL           reduce using rule 50 (factor -> call_function .)
    NOIGUAL         reduce using rule 50 (factor -> call_function .)
    IDENTICO        reduce using rule 50 (factor -> call_function .)
    MAYOR           reduce using rule 50 (factor -> call_function .)
    MAYORIG         reduce using rule 50 (factor -> call_function .)
    MENOR           reduce using rule 50 (factor -> call_function .)
    MENORIG         reduce using rule 50 (factor -> call_function .)
    PLUS            reduce using rule 50 (factor -> call_function .)
    MINUS           reduce using rule 50 (factor -> call_function .)
    CIERRE          reduce using rule 50 (factor -> call_function .)
    AND             reduce using rule 50 (factor -> call_function .)
    OR              reduce using rule 50 (factor -> call_function .)
    XOR             reduce using rule 50 (factor -> call_function .)
    NOT             reduce using rule 50 (factor -> call_function .)
    RPARENT         reduce using rule 50 (factor -> call_function .)
    COMMA           reduce using rule 50 (factor -> call_function .)


state 52

    (90) sentfunc -> FUNCTION NFUNCTION . LPARENT argfunc RPARENT LCURBRACE declaracion_sentencias RCURBRACE

    LPARENT         shift and go to state 112


state 53

    (15) sentreturn -> RETURN type . CIERRE
    (63) cond -> type .

  ! shift/reduce conflict for CIERRE resolved as shift
    CIERRE          shift and go to state 113
    IGUAL           reduce using rule 63 (cond -> type .)
    NOIGUAL         reduce using rule 63 (cond -> type .)
    IDENTICO        reduce using rule 63 (cond -> type .)
    MAYOR           reduce using rule 63 (cond -> type .)
    MAYORIG         reduce using rule 63 (cond -> type .)
    MENOR           reduce using rule 63 (cond -> type .)
    MENORIG         reduce using rule 63 (cond -> type .)
    AND             reduce using rule 63 (cond -> type .)
    OR              reduce using rule 63 (cond -> type .)
    XOR             reduce using rule 63 (cond -> type .)
    NOT             reduce using rule 63 (cond -> type .)

  ! CIERRE          [ reduce using rule 63 (cond -> type .) ]


state 54

    (16) sentreturn -> RETURN cond . CIERRE
    (64) cond -> cond . opcomparacion cond
    (65) cond -> cond . oplogicos cond
    (37) opcomparacion -> . IGUAL
    (38) opcomparacion -> . NOIGUAL
    (39) opcomparacion -> . IDENTICO
    (40) opcomparacion -> . MAYOR
    (41) opcomparacion -> . MAYORIG
    (42) opcomparacion -> . MENOR
    (43) opcomparacion -> . MENORIG
    (30) oplogicos -> . AND
    (31) oplogicos -> . OR
    (32) oplogicos -> . XOR
    (33) oplogicos -> . NOT

    CIERRE          shift and go to state 114
    IGUAL           shift and go to state 84
    NOIGUAL         shift and go to state 85
    IDENTICO        shift and go to state 86
    MAYOR           shift and go to state 87
    MAYORIG         shift and go to state 88
    MENOR           shift and go to state 89
    MENORIG         shift and go to state 90
    AND             shift and go to state 91
    OR              shift and go to state 92
    XOR             shift and go to state 93
    NOT             shift and go to state 94

    opcomparacion                  shift and go to state 82
    oplogicos                      shift and go to state 83

state 55

    (68) type -> typevar .
    (75) var_declaration_gen -> typevar .

  ! reduce/reduce conflict for CIERRE resolved using rule 68 (type -> typevar .)
  ! reduce/reduce conflict for IGUAL resolved using rule 68 (type -> typevar .)
  ! reduce/reduce conflict for NOIGUAL resolved using rule 68 (type -> typevar .)
  ! reduce/reduce conflict for IDENTICO resolved using rule 68 (type -> typevar .)
  ! reduce/reduce conflict for MAYOR resolved using rule 68 (type -> typevar .)
  ! reduce/reduce conflict for MAYORIG resolved using rule 68 (type -> typevar .)
  ! reduce/reduce conflict for MENOR resolved using rule 68 (type -> typevar .)
  ! reduce/reduce conflict for MENORIG resolved using rule 68 (type -> typevar .)
  ! reduce/reduce conflict for AND resolved using rule 68 (type -> typevar .)
  ! reduce/reduce conflict for OR resolved using rule 68 (type -> typevar .)
  ! reduce/reduce conflict for XOR resolved using rule 68 (type -> typevar .)
  ! reduce/reduce conflict for NOT resolved using rule 68 (type -> typevar .)
  ! reduce/reduce conflict for RPARENT resolved using rule 68 (type -> typevar .)
    CIERRE          reduce using rule 68 (type -> typevar .)
    IGUAL           reduce using rule 68 (type -> typevar .)
    NOIGUAL         reduce using rule 68 (type -> typevar .)
    IDENTICO        reduce using rule 68 (type -> typevar .)
    MAYOR           reduce using rule 68 (type -> typevar .)
    MAYORIG         reduce using rule 68 (type -> typevar .)
    MENOR           reduce using rule 68 (type -> typevar .)
    MENORIG         reduce using rule 68 (type -> typevar .)
    AND             reduce using rule 68 (type -> typevar .)
    OR              reduce using rule 68 (type -> typevar .)
    XOR             reduce using rule 68 (type -> typevar .)
    NOT             reduce using rule 68 (type -> typevar .)
    RPARENT         reduce using rule 68 (type -> typevar .)

  ! CIERRE          [ reduce using rule 75 (var_declaration_gen -> typevar .) ]
  ! IGUAL           [ reduce using rule 75 (var_declaration_gen -> typevar .) ]
  ! NOIGUAL         [ reduce using rule 75 (var_declaration_gen -> typevar .) ]
  ! IDENTICO        [ reduce using rule 75 (var_declaration_gen -> typevar .) ]
  ! MAYOR           [ reduce using rule 75 (var_declaration_gen -> typevar .) ]
  ! MAYORIG         [ reduce using rule 75 (var_declaration_gen -> typevar .) ]
  ! MENOR           [ reduce using rule 75 (var_declaration_gen -> typevar .) ]
  ! MENORIG         [ reduce using rule 75 (var_declaration_gen -> typevar .) ]
  ! AND             [ reduce using rule 75 (var_declaration_gen -> typevar .) ]
  ! OR              [ reduce using rule 75 (var_declaration_gen -> typevar .) ]
  ! XOR             [ reduce using rule 75 (var_declaration_gen -> typevar .) ]
  ! NOT             [ reduce using rule 75 (var_declaration_gen -> typevar .) ]
  ! RPARENT         [ reduce using rule 75 (var_declaration_gen -> typevar .) ]


state 56

    (66) cond -> LPARENT . type RPARENT
    (67) cond -> LPARENT . cond RPARENT
    (35) exp -> LPARENT . expsimple opcomparacion expsimple RPARENT
    (51) factor -> LPARENT . expsimple RPARENT
    (68) type -> . typevar
    (69) type -> . var_declaration_gen
    (63) cond -> . type
    (64) cond -> . cond opcomparacion cond
    (65) cond -> . cond oplogicos cond
    (66) cond -> . LPARENT type RPARENT
    (67) cond -> . LPARENT cond RPARENT
    (44) expsimple -> . expsimple opsuma term
    (45) expsimple -> . term
    (52) typevar -> . INTEGER
    (53) typevar -> . STRING
    (54) typevar -> . STRINGG
    (55) typevar -> . TRUE
    (56) typevar -> . FALSE
    (70) var_declaration_gen -> . ID
    (71) var_declaration_gen -> . ID PLUS PLUS
    (72) var_declaration_gen -> . ID MINUS MINUS
    (73) var_declaration_gen -> . MINUS MINUS ID
    (74) var_declaration_gen -> . PLUS PLUS ID
    (75) var_declaration_gen -> . typevar
    (76) var_declaration_gen -> . exp
    (46) term -> . term opmult factor
    (47) term -> . factor
    (34) exp -> . expsimple opcomparacion expsimple
    (35) exp -> . LPARENT expsimple opcomparacion expsimple RPARENT
    (36) exp -> . expsimple
    (48) factor -> . INTEGER
    (49) factor -> . ID
    (50) factor -> . call_function
    (51) factor -> . LPARENT expsimple RPARENT
    (91) call_function -> . NFUNCTION
    (92) call_function -> . NFUNCTION LPARENT arg RPARENT

    LPARENT         shift and go to state 56
    INTEGER         shift and go to state 37
    STRING          shift and go to state 38
    STRINGG         shift and go to state 39
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    ID              shift and go to state 48
    MINUS           shift and go to state 50
    PLUS            shift and go to state 49
    NFUNCTION       shift and go to state 16

    type                           shift and go to state 101
    cond                           shift and go to state 102
    expsimple                      shift and go to state 100
    typevar                        shift and go to state 55
    var_declaration_gen            shift and go to state 46
    term                           shift and go to state 45
    exp                            shift and go to state 57
    factor                         shift and go to state 47
    call_function                  shift and go to state 51

state 57

    (76) var_declaration_gen -> exp .

    CIERRE          reduce using rule 76 (var_declaration_gen -> exp .)
    IGUAL           reduce using rule 76 (var_declaration_gen -> exp .)
    NOIGUAL         reduce using rule 76 (var_declaration_gen -> exp .)
    IDENTICO        reduce using rule 76 (var_declaration_gen -> exp .)
    MAYOR           reduce using rule 76 (var_declaration_gen -> exp .)
    MAYORIG         reduce using rule 76 (var_declaration_gen -> exp .)
    MENOR           reduce using rule 76 (var_declaration_gen -> exp .)
    MENORIG         reduce using rule 76 (var_declaration_gen -> exp .)
    AND             reduce using rule 76 (var_declaration_gen -> exp .)
    OR              reduce using rule 76 (var_declaration_gen -> exp .)
    XOR             reduce using rule 76 (var_declaration_gen -> exp .)
    NOT             reduce using rule 76 (var_declaration_gen -> exp .)
    COMMA           reduce using rule 76 (var_declaration_gen -> exp .)
    RPARENT         reduce using rule 76 (var_declaration_gen -> exp .)


state 58

    (93) sentfor -> FOR LPARENT . ID EQUAL expsimple CIERRE cond CIERRE expsimple RPARENT LCURBRACE declaracion_sentencias RCURBRACE
    (94) sentfor -> FOR LPARENT . ID EQUAL expsimple CIERRE cond CIERRE ID PLUS PLUS RPARENT LCURBRACE declaracion_sentencias RCURBRACE
    (95) sentfor -> FOR LPARENT . ID EQUAL expsimple CIERRE cond CIERRE ID MINUS MINUS RPARENT LCURBRACE declaracion_sentencias RCURBRACE

    ID              shift and go to state 115


state 59

    (96) sentwhile -> WHILE LPARENT . cond RPARENT LCURBRACE declaracion_sentencias RCURBRACE
    (63) cond -> . type
    (64) cond -> . cond opcomparacion cond
    (65) cond -> . cond oplogicos cond
    (66) cond -> . LPARENT type RPARENT
    (67) cond -> . LPARENT cond RPARENT
    (68) type -> . typevar
    (69) type -> . var_declaration_gen
    (52) typevar -> . INTEGER
    (53) typevar -> . STRING
    (54) typevar -> . STRINGG
    (55) typevar -> . TRUE
    (56) typevar -> . FALSE
    (70) var_declaration_gen -> . ID
    (71) var_declaration_gen -> . ID PLUS PLUS
    (72) var_declaration_gen -> . ID MINUS MINUS
    (73) var_declaration_gen -> . MINUS MINUS ID
    (74) var_declaration_gen -> . PLUS PLUS ID
    (75) var_declaration_gen -> . typevar
    (76) var_declaration_gen -> . exp
    (34) exp -> . expsimple opcomparacion expsimple
    (35) exp -> . LPARENT expsimple opcomparacion expsimple RPARENT
    (36) exp -> . expsimple
    (44) expsimple -> . expsimple opsuma term
    (45) expsimple -> . term
    (46) term -> . term opmult factor
    (47) term -> . factor
    (48) factor -> . INTEGER
    (49) factor -> . ID
    (50) factor -> . call_function
    (51) factor -> . LPARENT expsimple RPARENT
    (91) call_function -> . NFUNCTION
    (92) call_function -> . NFUNCTION LPARENT arg RPARENT

    LPARENT         shift and go to state 56
    INTEGER         shift and go to state 37
    STRING          shift and go to state 38
    STRINGG         shift and go to state 39
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    ID              shift and go to state 48
    MINUS           shift and go to state 50
    PLUS            shift and go to state 49
    NFUNCTION       shift and go to state 16

    cond                           shift and go to state 116
    type                           shift and go to state 44
    typevar                        shift and go to state 55
    var_declaration_gen            shift and go to state 46
    exp                            shift and go to state 57
    expsimple                      shift and go to state 42
    term                           shift and go to state 45
    factor                         shift and go to state 47
    call_function                  shift and go to state 51

state 60

    (97) sentdowhile -> DO LCURBRACE . declaracion_sentencias RCURBRACE WHILE LPARENT cond RPARENT CIERRE
    (4) declaracion_sentencias -> . sentencias declaracion_sentencias
    (5) declaracion_sentencias -> . sentencias
    (6) sentencias -> . sentassign
    (7) sentencias -> . call_function CIERRE
    (8) sentencias -> . sentif
    (9) sentencias -> . sentecho
    (10) sentencias -> . sentfunc
    (11) sentencias -> . sentreturn
    (12) sentencias -> . sentfor
    (13) sentencias -> . sentwhile
    (14) sentencias -> . sentdowhile
    (25) sentassign -> . ID EQUAL exp CIERRE
    (26) sentassign -> . ID PLUS PLUS CIERRE
    (27) sentassign -> . ID MINUS MINUS CIERRE
    (91) call_function -> . NFUNCTION
    (92) call_function -> . NFUNCTION LPARENT arg RPARENT
    (20) sentif -> . IF genif auxsentif
    (17) sentecho -> . ECHO typevar CIERRE
    (18) sentecho -> . ECHO exp CIERRE
    (19) sentecho -> . ECHO cond CIERRE
    (90) sentfunc -> . FUNCTION NFUNCTION LPARENT argfunc RPARENT LCURBRACE declaracion_sentencias RCURBRACE
    (15) sentreturn -> . RETURN type CIERRE
    (16) sentreturn -> . RETURN cond CIERRE
    (93) sentfor -> . FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE expsimple RPARENT LCURBRACE declaracion_sentencias RCURBRACE
    (94) sentfor -> . FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE ID PLUS PLUS RPARENT LCURBRACE declaracion_sentencias RCURBRACE
    (95) sentfor -> . FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE ID MINUS MINUS RPARENT LCURBRACE declaracion_sentencias RCURBRACE
    (96) sentwhile -> . WHILE LPARENT cond RPARENT LCURBRACE declaracion_sentencias RCURBRACE
    (97) sentdowhile -> . DO LCURBRACE declaracion_sentencias RCURBRACE WHILE LPARENT cond RPARENT CIERRE

    ID              shift and go to state 15
    NFUNCTION       shift and go to state 16
    IF              shift and go to state 17
    ECHO            shift and go to state 18
    FUNCTION        shift and go to state 19
    RETURN          shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    DO              shift and go to state 23

    declaracion_sentencias         shift and go to state 117
    sentencias                     shift and go to state 5
    sentassign                     shift and go to state 6
    call_function                  shift and go to state 7
    sentif                         shift and go to state 8
    sentecho                       shift and go to state 9
    sentfunc                       shift and go to state 10
    sentreturn                     shift and go to state 11
    sentfor                        shift and go to state 12
    sentwhile                      shift and go to state 13
    sentdowhile                    shift and go to state 14

state 61

    (98) import -> INCLUDE STRINGG CIERRE .

    ID              reduce using rule 98 (import -> INCLUDE STRINGG CIERRE .)
    NFUNCTION       reduce using rule 98 (import -> INCLUDE STRINGG CIERRE .)
    IF              reduce using rule 98 (import -> INCLUDE STRINGG CIERRE .)
    ECHO            reduce using rule 98 (import -> INCLUDE STRINGG CIERRE .)
    FUNCTION        reduce using rule 98 (import -> INCLUDE STRINGG CIERRE .)
    RETURN          reduce using rule 98 (import -> INCLUDE STRINGG CIERRE .)
    FOR             reduce using rule 98 (import -> INCLUDE STRINGG CIERRE .)
    WHILE           reduce using rule 98 (import -> INCLUDE STRINGG CIERRE .)
    DO              reduce using rule 98 (import -> INCLUDE STRINGG CIERRE .)
    $end            reduce using rule 98 (import -> INCLUDE STRINGG CIERRE .)


state 62

    (49) factor -> ID .

    TIMES           reduce using rule 49 (factor -> ID .)
    DIV             reduce using rule 49 (factor -> ID .)
    MODULO          reduce using rule 49 (factor -> ID .)
    EXPONENCIACION  reduce using rule 49 (factor -> ID .)
    IGUAL           reduce using rule 49 (factor -> ID .)
    NOIGUAL         reduce using rule 49 (factor -> ID .)
    IDENTICO        reduce using rule 49 (factor -> ID .)
    MAYOR           reduce using rule 49 (factor -> ID .)
    MAYORIG         reduce using rule 49 (factor -> ID .)
    MENOR           reduce using rule 49 (factor -> ID .)
    MENORIG         reduce using rule 49 (factor -> ID .)
    PLUS            reduce using rule 49 (factor -> ID .)
    MINUS           reduce using rule 49 (factor -> ID .)
    CIERRE          reduce using rule 49 (factor -> ID .)
    RPARENT         reduce using rule 49 (factor -> ID .)
    AND             reduce using rule 49 (factor -> ID .)
    OR              reduce using rule 49 (factor -> ID .)
    XOR             reduce using rule 49 (factor -> ID .)
    NOT             reduce using rule 49 (factor -> ID .)
    COMMA           reduce using rule 49 (factor -> ID .)


state 63

    (25) sentassign -> ID EQUAL exp . CIERRE

    CIERRE          shift and go to state 118


state 64

    (35) exp -> LPARENT . expsimple opcomparacion expsimple RPARENT
    (51) factor -> LPARENT . expsimple RPARENT
    (44) expsimple -> . expsimple opsuma term
    (45) expsimple -> . term
    (46) term -> . term opmult factor
    (47) term -> . factor
    (48) factor -> . INTEGER
    (49) factor -> . ID
    (50) factor -> . call_function
    (51) factor -> . LPARENT expsimple RPARENT
    (91) call_function -> . NFUNCTION
    (92) call_function -> . NFUNCTION LPARENT arg RPARENT

    INTEGER         shift and go to state 65
    ID              shift and go to state 62
    LPARENT         shift and go to state 119
    NFUNCTION       shift and go to state 16

    expsimple                      shift and go to state 120
    term                           shift and go to state 45
    factor                         shift and go to state 47
    call_function                  shift and go to state 51

state 65

    (48) factor -> INTEGER .

    TIMES           reduce using rule 48 (factor -> INTEGER .)
    DIV             reduce using rule 48 (factor -> INTEGER .)
    MODULO          reduce using rule 48 (factor -> INTEGER .)
    EXPONENCIACION  reduce using rule 48 (factor -> INTEGER .)
    IGUAL           reduce using rule 48 (factor -> INTEGER .)
    NOIGUAL         reduce using rule 48 (factor -> INTEGER .)
    IDENTICO        reduce using rule 48 (factor -> INTEGER .)
    MAYOR           reduce using rule 48 (factor -> INTEGER .)
    MAYORIG         reduce using rule 48 (factor -> INTEGER .)
    MENOR           reduce using rule 48 (factor -> INTEGER .)
    MENORIG         reduce using rule 48 (factor -> INTEGER .)
    PLUS            reduce using rule 48 (factor -> INTEGER .)
    MINUS           reduce using rule 48 (factor -> INTEGER .)
    CIERRE          reduce using rule 48 (factor -> INTEGER .)
    RPARENT         reduce using rule 48 (factor -> INTEGER .)
    AND             reduce using rule 48 (factor -> INTEGER .)
    OR              reduce using rule 48 (factor -> INTEGER .)
    XOR             reduce using rule 48 (factor -> INTEGER .)
    NOT             reduce using rule 48 (factor -> INTEGER .)
    COMMA           reduce using rule 48 (factor -> INTEGER .)


state 66

    (26) sentassign -> ID PLUS PLUS . CIERRE

    CIERRE          shift and go to state 121


state 67

    (27) sentassign -> ID MINUS MINUS . CIERRE

    CIERRE          shift and go to state 122


state 68

    (92) call_function -> NFUNCTION LPARENT arg . RPARENT

    RPARENT         shift and go to state 123


state 69

    (77) arg -> var_declaration_gen .
    (83) arg -> var_declaration_gen . COMMA arg
    (69) type -> var_declaration_gen .

  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for RPARENT resolved using rule 69 (type -> var_declaration_gen .)
    COMMA           shift and go to state 124
    RPARENT         reduce using rule 69 (type -> var_declaration_gen .)

  ! RPARENT         [ reduce using rule 77 (arg -> var_declaration_gen .) ]
  ! COMMA           [ reduce using rule 69 (type -> var_declaration_gen .) ]


state 70

    (78) arg -> type .
    (80) arg -> type . COMMA arg

    RPARENT         reduce using rule 78 (arg -> type .)
    COMMA           shift and go to state 125


state 71

    (79) arg -> expsimple .
    (44) expsimple -> expsimple . opsuma term
    (34) exp -> expsimple . opcomparacion expsimple
    (36) exp -> expsimple .
    (57) opsuma -> . PLUS
    (58) opsuma -> . MINUS
    (37) opcomparacion -> . IGUAL
    (38) opcomparacion -> . NOIGUAL
    (39) opcomparacion -> . IDENTICO
    (40) opcomparacion -> . MAYOR
    (41) opcomparacion -> . MAYORIG
    (42) opcomparacion -> . MENOR
    (43) opcomparacion -> . MENORIG

  ! reduce/reduce conflict for RPARENT resolved using rule 36 (exp -> expsimple .)
    COMMA           reduce using rule 36 (exp -> expsimple .)
    RPARENT         reduce using rule 36 (exp -> expsimple .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98
    IGUAL           shift and go to state 84
    NOIGUAL         shift and go to state 85
    IDENTICO        shift and go to state 86
    MAYOR           shift and go to state 87
    MAYORIG         shift and go to state 88
    MENOR           shift and go to state 89
    MENORIG         shift and go to state 90

  ! RPARENT         [ reduce using rule 79 (arg -> expsimple .) ]

    opsuma                         shift and go to state 96
    opcomparacion                  shift and go to state 95

state 72

    (81) arg -> STRING .
    (84) arg -> STRING . COMMA arg
    (53) typevar -> STRING .

  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for RPARENT resolved using rule 53 (typevar -> STRING .)
    COMMA           shift and go to state 126
    RPARENT         reduce using rule 53 (typevar -> STRING .)

  ! RPARENT         [ reduce using rule 81 (arg -> STRING .) ]
  ! COMMA           [ reduce using rule 53 (typevar -> STRING .) ]


state 73

    (82) arg -> STRINGG .
    (85) arg -> STRINGG . COMMA arg
    (54) typevar -> STRINGG .

  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for RPARENT resolved using rule 54 (typevar -> STRINGG .)
    COMMA           shift and go to state 127
    RPARENT         reduce using rule 54 (typevar -> STRINGG .)

  ! RPARENT         [ reduce using rule 82 (arg -> STRINGG .) ]
  ! COMMA           [ reduce using rule 54 (typevar -> STRINGG .) ]


state 74

    (75) var_declaration_gen -> typevar .
    (68) type -> typevar .

  ! reduce/reduce conflict for COMMA resolved using rule 68 (type -> typevar .)
  ! reduce/reduce conflict for RPARENT resolved using rule 68 (type -> typevar .)
    COMMA           reduce using rule 68 (type -> typevar .)
    RPARENT         reduce using rule 68 (type -> typevar .)

  ! COMMA           [ reduce using rule 75 (var_declaration_gen -> typevar .) ]
  ! RPARENT         [ reduce using rule 75 (var_declaration_gen -> typevar .) ]


state 75

    (20) sentif -> IF genif auxsentif .

    ID              reduce using rule 20 (sentif -> IF genif auxsentif .)
    NFUNCTION       reduce using rule 20 (sentif -> IF genif auxsentif .)
    IF              reduce using rule 20 (sentif -> IF genif auxsentif .)
    ECHO            reduce using rule 20 (sentif -> IF genif auxsentif .)
    FUNCTION        reduce using rule 20 (sentif -> IF genif auxsentif .)
    RETURN          reduce using rule 20 (sentif -> IF genif auxsentif .)
    FOR             reduce using rule 20 (sentif -> IF genif auxsentif .)
    WHILE           reduce using rule 20 (sentif -> IF genif auxsentif .)
    DO              reduce using rule 20 (sentif -> IF genif auxsentif .)
    $end            reduce using rule 20 (sentif -> IF genif auxsentif .)
    RCURBRACE       reduce using rule 20 (sentif -> IF genif auxsentif .)


state 76

    (21) auxsentif -> ELSE . IF genif auxsentif
    (22) auxsentif -> ELSE . LCURBRACE declaracion_sentencias RCURBRACE

    IF              shift and go to state 128
    LCURBRACE       shift and go to state 129


state 77

    (23) auxsentif -> empty .

    ID              reduce using rule 23 (auxsentif -> empty .)
    NFUNCTION       reduce using rule 23 (auxsentif -> empty .)
    IF              reduce using rule 23 (auxsentif -> empty .)
    ECHO            reduce using rule 23 (auxsentif -> empty .)
    FUNCTION        reduce using rule 23 (auxsentif -> empty .)
    RETURN          reduce using rule 23 (auxsentif -> empty .)
    FOR             reduce using rule 23 (auxsentif -> empty .)
    WHILE           reduce using rule 23 (auxsentif -> empty .)
    DO              reduce using rule 23 (auxsentif -> empty .)
    $end            reduce using rule 23 (auxsentif -> empty .)
    RCURBRACE       reduce using rule 23 (auxsentif -> empty .)


state 78

    (24) genif -> LPARENT cond . RPARENT LCURBRACE declaracion_sentencias RCURBRACE
    (64) cond -> cond . opcomparacion cond
    (65) cond -> cond . oplogicos cond
    (37) opcomparacion -> . IGUAL
    (38) opcomparacion -> . NOIGUAL
    (39) opcomparacion -> . IDENTICO
    (40) opcomparacion -> . MAYOR
    (41) opcomparacion -> . MAYORIG
    (42) opcomparacion -> . MENOR
    (43) opcomparacion -> . MENORIG
    (30) oplogicos -> . AND
    (31) oplogicos -> . OR
    (32) oplogicos -> . XOR
    (33) oplogicos -> . NOT

    RPARENT         shift and go to state 130
    IGUAL           shift and go to state 84
    NOIGUAL         shift and go to state 85
    IDENTICO        shift and go to state 86
    MAYOR           shift and go to state 87
    MAYORIG         shift and go to state 88
    MENOR           shift and go to state 89
    MENORIG         shift and go to state 90
    AND             shift and go to state 91
    OR              shift and go to state 92
    XOR             shift and go to state 93
    NOT             shift and go to state 94

    opcomparacion                  shift and go to state 82
    oplogicos                      shift and go to state 83

state 79

    (17) sentecho -> ECHO typevar CIERRE .

    ID              reduce using rule 17 (sentecho -> ECHO typevar CIERRE .)
    NFUNCTION       reduce using rule 17 (sentecho -> ECHO typevar CIERRE .)
    IF              reduce using rule 17 (sentecho -> ECHO typevar CIERRE .)
    ECHO            reduce using rule 17 (sentecho -> ECHO typevar CIERRE .)
    FUNCTION        reduce using rule 17 (sentecho -> ECHO typevar CIERRE .)
    RETURN          reduce using rule 17 (sentecho -> ECHO typevar CIERRE .)
    FOR             reduce using rule 17 (sentecho -> ECHO typevar CIERRE .)
    WHILE           reduce using rule 17 (sentecho -> ECHO typevar CIERRE .)
    DO              reduce using rule 17 (sentecho -> ECHO typevar CIERRE .)
    $end            reduce using rule 17 (sentecho -> ECHO typevar CIERRE .)
    RCURBRACE       reduce using rule 17 (sentecho -> ECHO typevar CIERRE .)


state 80

    (18) sentecho -> ECHO exp CIERRE .

    ID              reduce using rule 18 (sentecho -> ECHO exp CIERRE .)
    NFUNCTION       reduce using rule 18 (sentecho -> ECHO exp CIERRE .)
    IF              reduce using rule 18 (sentecho -> ECHO exp CIERRE .)
    ECHO            reduce using rule 18 (sentecho -> ECHO exp CIERRE .)
    FUNCTION        reduce using rule 18 (sentecho -> ECHO exp CIERRE .)
    RETURN          reduce using rule 18 (sentecho -> ECHO exp CIERRE .)
    FOR             reduce using rule 18 (sentecho -> ECHO exp CIERRE .)
    WHILE           reduce using rule 18 (sentecho -> ECHO exp CIERRE .)
    DO              reduce using rule 18 (sentecho -> ECHO exp CIERRE .)
    $end            reduce using rule 18 (sentecho -> ECHO exp CIERRE .)
    RCURBRACE       reduce using rule 18 (sentecho -> ECHO exp CIERRE .)


state 81

    (19) sentecho -> ECHO cond CIERRE .

    ID              reduce using rule 19 (sentecho -> ECHO cond CIERRE .)
    NFUNCTION       reduce using rule 19 (sentecho -> ECHO cond CIERRE .)
    IF              reduce using rule 19 (sentecho -> ECHO cond CIERRE .)
    ECHO            reduce using rule 19 (sentecho -> ECHO cond CIERRE .)
    FUNCTION        reduce using rule 19 (sentecho -> ECHO cond CIERRE .)
    RETURN          reduce using rule 19 (sentecho -> ECHO cond CIERRE .)
    FOR             reduce using rule 19 (sentecho -> ECHO cond CIERRE .)
    WHILE           reduce using rule 19 (sentecho -> ECHO cond CIERRE .)
    DO              reduce using rule 19 (sentecho -> ECHO cond CIERRE .)
    $end            reduce using rule 19 (sentecho -> ECHO cond CIERRE .)
    RCURBRACE       reduce using rule 19 (sentecho -> ECHO cond CIERRE .)


state 82

    (64) cond -> cond opcomparacion . cond
    (63) cond -> . type
    (64) cond -> . cond opcomparacion cond
    (65) cond -> . cond oplogicos cond
    (66) cond -> . LPARENT type RPARENT
    (67) cond -> . LPARENT cond RPARENT
    (68) type -> . typevar
    (69) type -> . var_declaration_gen
    (52) typevar -> . INTEGER
    (53) typevar -> . STRING
    (54) typevar -> . STRINGG
    (55) typevar -> . TRUE
    (56) typevar -> . FALSE
    (70) var_declaration_gen -> . ID
    (71) var_declaration_gen -> . ID PLUS PLUS
    (72) var_declaration_gen -> . ID MINUS MINUS
    (73) var_declaration_gen -> . MINUS MINUS ID
    (74) var_declaration_gen -> . PLUS PLUS ID
    (75) var_declaration_gen -> . typevar
    (76) var_declaration_gen -> . exp
    (34) exp -> . expsimple opcomparacion expsimple
    (35) exp -> . LPARENT expsimple opcomparacion expsimple RPARENT
    (36) exp -> . expsimple
    (44) expsimple -> . expsimple opsuma term
    (45) expsimple -> . term
    (46) term -> . term opmult factor
    (47) term -> . factor
    (48) factor -> . INTEGER
    (49) factor -> . ID
    (50) factor -> . call_function
    (51) factor -> . LPARENT expsimple RPARENT
    (91) call_function -> . NFUNCTION
    (92) call_function -> . NFUNCTION LPARENT arg RPARENT

    LPARENT         shift and go to state 56
    INTEGER         shift and go to state 37
    STRING          shift and go to state 38
    STRINGG         shift and go to state 39
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    ID              shift and go to state 48
    MINUS           shift and go to state 50
    PLUS            shift and go to state 49
    NFUNCTION       shift and go to state 16

    cond                           shift and go to state 131
    type                           shift and go to state 44
    typevar                        shift and go to state 55
    var_declaration_gen            shift and go to state 46
    exp                            shift and go to state 57
    expsimple                      shift and go to state 42
    term                           shift and go to state 45
    factor                         shift and go to state 47
    call_function                  shift and go to state 51

state 83

    (65) cond -> cond oplogicos . cond
    (63) cond -> . type
    (64) cond -> . cond opcomparacion cond
    (65) cond -> . cond oplogicos cond
    (66) cond -> . LPARENT type RPARENT
    (67) cond -> . LPARENT cond RPARENT
    (68) type -> . typevar
    (69) type -> . var_declaration_gen
    (52) typevar -> . INTEGER
    (53) typevar -> . STRING
    (54) typevar -> . STRINGG
    (55) typevar -> . TRUE
    (56) typevar -> . FALSE
    (70) var_declaration_gen -> . ID
    (71) var_declaration_gen -> . ID PLUS PLUS
    (72) var_declaration_gen -> . ID MINUS MINUS
    (73) var_declaration_gen -> . MINUS MINUS ID
    (74) var_declaration_gen -> . PLUS PLUS ID
    (75) var_declaration_gen -> . typevar
    (76) var_declaration_gen -> . exp
    (34) exp -> . expsimple opcomparacion expsimple
    (35) exp -> . LPARENT expsimple opcomparacion expsimple RPARENT
    (36) exp -> . expsimple
    (44) expsimple -> . expsimple opsuma term
    (45) expsimple -> . term
    (46) term -> . term opmult factor
    (47) term -> . factor
    (48) factor -> . INTEGER
    (49) factor -> . ID
    (50) factor -> . call_function
    (51) factor -> . LPARENT expsimple RPARENT
    (91) call_function -> . NFUNCTION
    (92) call_function -> . NFUNCTION LPARENT arg RPARENT

    LPARENT         shift and go to state 56
    INTEGER         shift and go to state 37
    STRING          shift and go to state 38
    STRINGG         shift and go to state 39
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    ID              shift and go to state 48
    MINUS           shift and go to state 50
    PLUS            shift and go to state 49
    NFUNCTION       shift and go to state 16

    cond                           shift and go to state 132
    type                           shift and go to state 44
    typevar                        shift and go to state 55
    var_declaration_gen            shift and go to state 46
    exp                            shift and go to state 57
    expsimple                      shift and go to state 42
    term                           shift and go to state 45
    factor                         shift and go to state 47
    call_function                  shift and go to state 51

state 84

    (37) opcomparacion -> IGUAL .

    LPARENT         reduce using rule 37 (opcomparacion -> IGUAL .)
    INTEGER         reduce using rule 37 (opcomparacion -> IGUAL .)
    STRING          reduce using rule 37 (opcomparacion -> IGUAL .)
    STRINGG         reduce using rule 37 (opcomparacion -> IGUAL .)
    TRUE            reduce using rule 37 (opcomparacion -> IGUAL .)
    FALSE           reduce using rule 37 (opcomparacion -> IGUAL .)
    ID              reduce using rule 37 (opcomparacion -> IGUAL .)
    MINUS           reduce using rule 37 (opcomparacion -> IGUAL .)
    PLUS            reduce using rule 37 (opcomparacion -> IGUAL .)
    NFUNCTION       reduce using rule 37 (opcomparacion -> IGUAL .)


state 85

    (38) opcomparacion -> NOIGUAL .

    LPARENT         reduce using rule 38 (opcomparacion -> NOIGUAL .)
    INTEGER         reduce using rule 38 (opcomparacion -> NOIGUAL .)
    STRING          reduce using rule 38 (opcomparacion -> NOIGUAL .)
    STRINGG         reduce using rule 38 (opcomparacion -> NOIGUAL .)
    TRUE            reduce using rule 38 (opcomparacion -> NOIGUAL .)
    FALSE           reduce using rule 38 (opcomparacion -> NOIGUAL .)
    ID              reduce using rule 38 (opcomparacion -> NOIGUAL .)
    MINUS           reduce using rule 38 (opcomparacion -> NOIGUAL .)
    PLUS            reduce using rule 38 (opcomparacion -> NOIGUAL .)
    NFUNCTION       reduce using rule 38 (opcomparacion -> NOIGUAL .)


state 86

    (39) opcomparacion -> IDENTICO .

    LPARENT         reduce using rule 39 (opcomparacion -> IDENTICO .)
    INTEGER         reduce using rule 39 (opcomparacion -> IDENTICO .)
    STRING          reduce using rule 39 (opcomparacion -> IDENTICO .)
    STRINGG         reduce using rule 39 (opcomparacion -> IDENTICO .)
    TRUE            reduce using rule 39 (opcomparacion -> IDENTICO .)
    FALSE           reduce using rule 39 (opcomparacion -> IDENTICO .)
    ID              reduce using rule 39 (opcomparacion -> IDENTICO .)
    MINUS           reduce using rule 39 (opcomparacion -> IDENTICO .)
    PLUS            reduce using rule 39 (opcomparacion -> IDENTICO .)
    NFUNCTION       reduce using rule 39 (opcomparacion -> IDENTICO .)


state 87

    (40) opcomparacion -> MAYOR .

    LPARENT         reduce using rule 40 (opcomparacion -> MAYOR .)
    INTEGER         reduce using rule 40 (opcomparacion -> MAYOR .)
    STRING          reduce using rule 40 (opcomparacion -> MAYOR .)
    STRINGG         reduce using rule 40 (opcomparacion -> MAYOR .)
    TRUE            reduce using rule 40 (opcomparacion -> MAYOR .)
    FALSE           reduce using rule 40 (opcomparacion -> MAYOR .)
    ID              reduce using rule 40 (opcomparacion -> MAYOR .)
    MINUS           reduce using rule 40 (opcomparacion -> MAYOR .)
    PLUS            reduce using rule 40 (opcomparacion -> MAYOR .)
    NFUNCTION       reduce using rule 40 (opcomparacion -> MAYOR .)


state 88

    (41) opcomparacion -> MAYORIG .

    LPARENT         reduce using rule 41 (opcomparacion -> MAYORIG .)
    INTEGER         reduce using rule 41 (opcomparacion -> MAYORIG .)
    STRING          reduce using rule 41 (opcomparacion -> MAYORIG .)
    STRINGG         reduce using rule 41 (opcomparacion -> MAYORIG .)
    TRUE            reduce using rule 41 (opcomparacion -> MAYORIG .)
    FALSE           reduce using rule 41 (opcomparacion -> MAYORIG .)
    ID              reduce using rule 41 (opcomparacion -> MAYORIG .)
    MINUS           reduce using rule 41 (opcomparacion -> MAYORIG .)
    PLUS            reduce using rule 41 (opcomparacion -> MAYORIG .)
    NFUNCTION       reduce using rule 41 (opcomparacion -> MAYORIG .)


state 89

    (42) opcomparacion -> MENOR .

    LPARENT         reduce using rule 42 (opcomparacion -> MENOR .)
    INTEGER         reduce using rule 42 (opcomparacion -> MENOR .)
    STRING          reduce using rule 42 (opcomparacion -> MENOR .)
    STRINGG         reduce using rule 42 (opcomparacion -> MENOR .)
    TRUE            reduce using rule 42 (opcomparacion -> MENOR .)
    FALSE           reduce using rule 42 (opcomparacion -> MENOR .)
    ID              reduce using rule 42 (opcomparacion -> MENOR .)
    MINUS           reduce using rule 42 (opcomparacion -> MENOR .)
    PLUS            reduce using rule 42 (opcomparacion -> MENOR .)
    NFUNCTION       reduce using rule 42 (opcomparacion -> MENOR .)


state 90

    (43) opcomparacion -> MENORIG .

    LPARENT         reduce using rule 43 (opcomparacion -> MENORIG .)
    INTEGER         reduce using rule 43 (opcomparacion -> MENORIG .)
    STRING          reduce using rule 43 (opcomparacion -> MENORIG .)
    STRINGG         reduce using rule 43 (opcomparacion -> MENORIG .)
    TRUE            reduce using rule 43 (opcomparacion -> MENORIG .)
    FALSE           reduce using rule 43 (opcomparacion -> MENORIG .)
    ID              reduce using rule 43 (opcomparacion -> MENORIG .)
    MINUS           reduce using rule 43 (opcomparacion -> MENORIG .)
    PLUS            reduce using rule 43 (opcomparacion -> MENORIG .)
    NFUNCTION       reduce using rule 43 (opcomparacion -> MENORIG .)


state 91

    (30) oplogicos -> AND .

    LPARENT         reduce using rule 30 (oplogicos -> AND .)
    INTEGER         reduce using rule 30 (oplogicos -> AND .)
    STRING          reduce using rule 30 (oplogicos -> AND .)
    STRINGG         reduce using rule 30 (oplogicos -> AND .)
    TRUE            reduce using rule 30 (oplogicos -> AND .)
    FALSE           reduce using rule 30 (oplogicos -> AND .)
    ID              reduce using rule 30 (oplogicos -> AND .)
    MINUS           reduce using rule 30 (oplogicos -> AND .)
    PLUS            reduce using rule 30 (oplogicos -> AND .)
    NFUNCTION       reduce using rule 30 (oplogicos -> AND .)


state 92

    (31) oplogicos -> OR .

    LPARENT         reduce using rule 31 (oplogicos -> OR .)
    INTEGER         reduce using rule 31 (oplogicos -> OR .)
    STRING          reduce using rule 31 (oplogicos -> OR .)
    STRINGG         reduce using rule 31 (oplogicos -> OR .)
    TRUE            reduce using rule 31 (oplogicos -> OR .)
    FALSE           reduce using rule 31 (oplogicos -> OR .)
    ID              reduce using rule 31 (oplogicos -> OR .)
    MINUS           reduce using rule 31 (oplogicos -> OR .)
    PLUS            reduce using rule 31 (oplogicos -> OR .)
    NFUNCTION       reduce using rule 31 (oplogicos -> OR .)


state 93

    (32) oplogicos -> XOR .

    LPARENT         reduce using rule 32 (oplogicos -> XOR .)
    INTEGER         reduce using rule 32 (oplogicos -> XOR .)
    STRING          reduce using rule 32 (oplogicos -> XOR .)
    STRINGG         reduce using rule 32 (oplogicos -> XOR .)
    TRUE            reduce using rule 32 (oplogicos -> XOR .)
    FALSE           reduce using rule 32 (oplogicos -> XOR .)
    ID              reduce using rule 32 (oplogicos -> XOR .)
    MINUS           reduce using rule 32 (oplogicos -> XOR .)
    PLUS            reduce using rule 32 (oplogicos -> XOR .)
    NFUNCTION       reduce using rule 32 (oplogicos -> XOR .)


state 94

    (33) oplogicos -> NOT .

    LPARENT         reduce using rule 33 (oplogicos -> NOT .)
    INTEGER         reduce using rule 33 (oplogicos -> NOT .)
    STRING          reduce using rule 33 (oplogicos -> NOT .)
    STRINGG         reduce using rule 33 (oplogicos -> NOT .)
    TRUE            reduce using rule 33 (oplogicos -> NOT .)
    FALSE           reduce using rule 33 (oplogicos -> NOT .)
    ID              reduce using rule 33 (oplogicos -> NOT .)
    MINUS           reduce using rule 33 (oplogicos -> NOT .)
    PLUS            reduce using rule 33 (oplogicos -> NOT .)
    NFUNCTION       reduce using rule 33 (oplogicos -> NOT .)


state 95

    (34) exp -> expsimple opcomparacion . expsimple
    (44) expsimple -> . expsimple opsuma term
    (45) expsimple -> . term
    (46) term -> . term opmult factor
    (47) term -> . factor
    (48) factor -> . INTEGER
    (49) factor -> . ID
    (50) factor -> . call_function
    (51) factor -> . LPARENT expsimple RPARENT
    (91) call_function -> . NFUNCTION
    (92) call_function -> . NFUNCTION LPARENT arg RPARENT

    INTEGER         shift and go to state 65
    ID              shift and go to state 62
    LPARENT         shift and go to state 119
    NFUNCTION       shift and go to state 16

    expsimple                      shift and go to state 133
    term                           shift and go to state 45
    factor                         shift and go to state 47
    call_function                  shift and go to state 51

state 96

    (44) expsimple -> expsimple opsuma . term
    (46) term -> . term opmult factor
    (47) term -> . factor
    (48) factor -> . INTEGER
    (49) factor -> . ID
    (50) factor -> . call_function
    (51) factor -> . LPARENT expsimple RPARENT
    (91) call_function -> . NFUNCTION
    (92) call_function -> . NFUNCTION LPARENT arg RPARENT

    INTEGER         shift and go to state 65
    ID              shift and go to state 62
    LPARENT         shift and go to state 119
    NFUNCTION       shift and go to state 16

    term                           shift and go to state 134
    factor                         shift and go to state 47
    call_function                  shift and go to state 51

state 97

    (57) opsuma -> PLUS .

    INTEGER         reduce using rule 57 (opsuma -> PLUS .)
    ID              reduce using rule 57 (opsuma -> PLUS .)
    LPARENT         reduce using rule 57 (opsuma -> PLUS .)
    NFUNCTION       reduce using rule 57 (opsuma -> PLUS .)


state 98

    (58) opsuma -> MINUS .

    INTEGER         reduce using rule 58 (opsuma -> MINUS .)
    ID              reduce using rule 58 (opsuma -> MINUS .)
    LPARENT         reduce using rule 58 (opsuma -> MINUS .)
    NFUNCTION       reduce using rule 58 (opsuma -> MINUS .)


state 99

    (66) cond -> LPARENT . type RPARENT
    (67) cond -> LPARENT . cond RPARENT
    (51) factor -> LPARENT . expsimple RPARENT
    (35) exp -> LPARENT . expsimple opcomparacion expsimple RPARENT
    (68) type -> . typevar
    (69) type -> . var_declaration_gen
    (63) cond -> . type
    (64) cond -> . cond opcomparacion cond
    (65) cond -> . cond oplogicos cond
    (66) cond -> . LPARENT type RPARENT
    (67) cond -> . LPARENT cond RPARENT
    (44) expsimple -> . expsimple opsuma term
    (45) expsimple -> . term
    (52) typevar -> . INTEGER
    (53) typevar -> . STRING
    (54) typevar -> . STRINGG
    (55) typevar -> . TRUE
    (56) typevar -> . FALSE
    (70) var_declaration_gen -> . ID
    (71) var_declaration_gen -> . ID PLUS PLUS
    (72) var_declaration_gen -> . ID MINUS MINUS
    (73) var_declaration_gen -> . MINUS MINUS ID
    (74) var_declaration_gen -> . PLUS PLUS ID
    (75) var_declaration_gen -> . typevar
    (76) var_declaration_gen -> . exp
    (46) term -> . term opmult factor
    (47) term -> . factor
    (34) exp -> . expsimple opcomparacion expsimple
    (35) exp -> . LPARENT expsimple opcomparacion expsimple RPARENT
    (36) exp -> . expsimple
    (48) factor -> . INTEGER
    (49) factor -> . ID
    (50) factor -> . call_function
    (51) factor -> . LPARENT expsimple RPARENT
    (91) call_function -> . NFUNCTION
    (92) call_function -> . NFUNCTION LPARENT arg RPARENT

    LPARENT         shift and go to state 56
    INTEGER         shift and go to state 37
    STRING          shift and go to state 38
    STRINGG         shift and go to state 39
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    ID              shift and go to state 48
    MINUS           shift and go to state 50
    PLUS            shift and go to state 49
    NFUNCTION       shift and go to state 16

    type                           shift and go to state 101
    cond                           shift and go to state 102
    expsimple                      shift and go to state 135
    typevar                        shift and go to state 55
    var_declaration_gen            shift and go to state 46
    term                           shift and go to state 45
    exp                            shift and go to state 57
    factor                         shift and go to state 47
    call_function                  shift and go to state 51

state 100

    (35) exp -> LPARENT expsimple . opcomparacion expsimple RPARENT
    (51) factor -> LPARENT expsimple . RPARENT
    (44) expsimple -> expsimple . opsuma term
    (34) exp -> expsimple . opcomparacion expsimple
    (36) exp -> expsimple .
    (37) opcomparacion -> . IGUAL
    (38) opcomparacion -> . NOIGUAL
    (39) opcomparacion -> . IDENTICO
    (40) opcomparacion -> . MAYOR
    (41) opcomparacion -> . MAYORIG
    (42) opcomparacion -> . MENOR
    (43) opcomparacion -> . MENORIG
    (57) opsuma -> . PLUS
    (58) opsuma -> . MINUS

  ! shift/reduce conflict for RPARENT resolved as shift
  ! shift/reduce conflict for IGUAL resolved as shift
  ! shift/reduce conflict for NOIGUAL resolved as shift
  ! shift/reduce conflict for IDENTICO resolved as shift
  ! shift/reduce conflict for MAYOR resolved as shift
  ! shift/reduce conflict for MAYORIG resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for MENORIG resolved as shift
    RPARENT         shift and go to state 137
    AND             reduce using rule 36 (exp -> expsimple .)
    OR              reduce using rule 36 (exp -> expsimple .)
    XOR             reduce using rule 36 (exp -> expsimple .)
    NOT             reduce using rule 36 (exp -> expsimple .)
    IGUAL           shift and go to state 84
    NOIGUAL         shift and go to state 85
    IDENTICO        shift and go to state 86
    MAYOR           shift and go to state 87
    MAYORIG         shift and go to state 88
    MENOR           shift and go to state 89
    MENORIG         shift and go to state 90
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98

  ! RPARENT         [ reduce using rule 36 (exp -> expsimple .) ]
  ! IGUAL           [ reduce using rule 36 (exp -> expsimple .) ]
  ! NOIGUAL         [ reduce using rule 36 (exp -> expsimple .) ]
  ! IDENTICO        [ reduce using rule 36 (exp -> expsimple .) ]
  ! MAYOR           [ reduce using rule 36 (exp -> expsimple .) ]
  ! MAYORIG         [ reduce using rule 36 (exp -> expsimple .) ]
  ! MENOR           [ reduce using rule 36 (exp -> expsimple .) ]
  ! MENORIG         [ reduce using rule 36 (exp -> expsimple .) ]

    opcomparacion                  shift and go to state 136
    opsuma                         shift and go to state 96

state 101

    (66) cond -> LPARENT type . RPARENT
    (63) cond -> type .

  ! shift/reduce conflict for RPARENT resolved as shift
    RPARENT         shift and go to state 138
    IGUAL           reduce using rule 63 (cond -> type .)
    NOIGUAL         reduce using rule 63 (cond -> type .)
    IDENTICO        reduce using rule 63 (cond -> type .)
    MAYOR           reduce using rule 63 (cond -> type .)
    MAYORIG         reduce using rule 63 (cond -> type .)
    MENOR           reduce using rule 63 (cond -> type .)
    MENORIG         reduce using rule 63 (cond -> type .)
    AND             reduce using rule 63 (cond -> type .)
    OR              reduce using rule 63 (cond -> type .)
    XOR             reduce using rule 63 (cond -> type .)
    NOT             reduce using rule 63 (cond -> type .)

  ! RPARENT         [ reduce using rule 63 (cond -> type .) ]


state 102

    (67) cond -> LPARENT cond . RPARENT
    (64) cond -> cond . opcomparacion cond
    (65) cond -> cond . oplogicos cond
    (37) opcomparacion -> . IGUAL
    (38) opcomparacion -> . NOIGUAL
    (39) opcomparacion -> . IDENTICO
    (40) opcomparacion -> . MAYOR
    (41) opcomparacion -> . MAYORIG
    (42) opcomparacion -> . MENOR
    (43) opcomparacion -> . MENORIG
    (30) oplogicos -> . AND
    (31) oplogicos -> . OR
    (32) oplogicos -> . XOR
    (33) oplogicos -> . NOT

    RPARENT         shift and go to state 139
    IGUAL           shift and go to state 84
    NOIGUAL         shift and go to state 85
    IDENTICO        shift and go to state 86
    MAYOR           shift and go to state 87
    MAYORIG         shift and go to state 88
    MENOR           shift and go to state 89
    MENORIG         shift and go to state 90
    AND             shift and go to state 91
    OR              shift and go to state 92
    XOR             shift and go to state 93
    NOT             shift and go to state 94

    opcomparacion                  shift and go to state 82
    oplogicos                      shift and go to state 83

state 103

    (46) term -> term opmult . factor
    (48) factor -> . INTEGER
    (49) factor -> . ID
    (50) factor -> . call_function
    (51) factor -> . LPARENT expsimple RPARENT
    (91) call_function -> . NFUNCTION
    (92) call_function -> . NFUNCTION LPARENT arg RPARENT

    INTEGER         shift and go to state 65
    ID              shift and go to state 62
    LPARENT         shift and go to state 119
    NFUNCTION       shift and go to state 16

    factor                         shift and go to state 140
    call_function                  shift and go to state 51

state 104

    (59) opmult -> TIMES .

    INTEGER         reduce using rule 59 (opmult -> TIMES .)
    ID              reduce using rule 59 (opmult -> TIMES .)
    LPARENT         reduce using rule 59 (opmult -> TIMES .)
    NFUNCTION       reduce using rule 59 (opmult -> TIMES .)


state 105

    (60) opmult -> DIV .

    INTEGER         reduce using rule 60 (opmult -> DIV .)
    ID              reduce using rule 60 (opmult -> DIV .)
    LPARENT         reduce using rule 60 (opmult -> DIV .)
    NFUNCTION       reduce using rule 60 (opmult -> DIV .)


state 106

    (61) opmult -> MODULO .

    INTEGER         reduce using rule 61 (opmult -> MODULO .)
    ID              reduce using rule 61 (opmult -> MODULO .)
    LPARENT         reduce using rule 61 (opmult -> MODULO .)
    NFUNCTION       reduce using rule 61 (opmult -> MODULO .)


state 107

    (62) opmult -> EXPONENCIACION .

    INTEGER         reduce using rule 62 (opmult -> EXPONENCIACION .)
    ID              reduce using rule 62 (opmult -> EXPONENCIACION .)
    LPARENT         reduce using rule 62 (opmult -> EXPONENCIACION .)
    NFUNCTION       reduce using rule 62 (opmult -> EXPONENCIACION .)


state 108

    (71) var_declaration_gen -> ID PLUS . PLUS

    PLUS            shift and go to state 141


state 109

    (72) var_declaration_gen -> ID MINUS . MINUS

    MINUS           shift and go to state 142


state 110

    (74) var_declaration_gen -> PLUS PLUS . ID

    ID              shift and go to state 143


state 111

    (73) var_declaration_gen -> MINUS MINUS . ID

    ID              shift and go to state 144


state 112

    (90) sentfunc -> FUNCTION NFUNCTION LPARENT . argfunc RPARENT LCURBRACE declaracion_sentencias RCURBRACE
    (87) argfunc -> . ID
    (88) argfunc -> . ID COMMA argfunc
    (89) argfunc -> .

    ID              shift and go to state 146
    RPARENT         reduce using rule 89 (argfunc -> .)

    argfunc                        shift and go to state 145

state 113

    (15) sentreturn -> RETURN type CIERRE .

    ID              reduce using rule 15 (sentreturn -> RETURN type CIERRE .)
    NFUNCTION       reduce using rule 15 (sentreturn -> RETURN type CIERRE .)
    IF              reduce using rule 15 (sentreturn -> RETURN type CIERRE .)
    ECHO            reduce using rule 15 (sentreturn -> RETURN type CIERRE .)
    FUNCTION        reduce using rule 15 (sentreturn -> RETURN type CIERRE .)
    RETURN          reduce using rule 15 (sentreturn -> RETURN type CIERRE .)
    FOR             reduce using rule 15 (sentreturn -> RETURN type CIERRE .)
    WHILE           reduce using rule 15 (sentreturn -> RETURN type CIERRE .)
    DO              reduce using rule 15 (sentreturn -> RETURN type CIERRE .)
    $end            reduce using rule 15 (sentreturn -> RETURN type CIERRE .)
    RCURBRACE       reduce using rule 15 (sentreturn -> RETURN type CIERRE .)


state 114

    (16) sentreturn -> RETURN cond CIERRE .

    ID              reduce using rule 16 (sentreturn -> RETURN cond CIERRE .)
    NFUNCTION       reduce using rule 16 (sentreturn -> RETURN cond CIERRE .)
    IF              reduce using rule 16 (sentreturn -> RETURN cond CIERRE .)
    ECHO            reduce using rule 16 (sentreturn -> RETURN cond CIERRE .)
    FUNCTION        reduce using rule 16 (sentreturn -> RETURN cond CIERRE .)
    RETURN          reduce using rule 16 (sentreturn -> RETURN cond CIERRE .)
    FOR             reduce using rule 16 (sentreturn -> RETURN cond CIERRE .)
    WHILE           reduce using rule 16 (sentreturn -> RETURN cond CIERRE .)
    DO              reduce using rule 16 (sentreturn -> RETURN cond CIERRE .)
    $end            reduce using rule 16 (sentreturn -> RETURN cond CIERRE .)
    RCURBRACE       reduce using rule 16 (sentreturn -> RETURN cond CIERRE .)


state 115

    (93) sentfor -> FOR LPARENT ID . EQUAL expsimple CIERRE cond CIERRE expsimple RPARENT LCURBRACE declaracion_sentencias RCURBRACE
    (94) sentfor -> FOR LPARENT ID . EQUAL expsimple CIERRE cond CIERRE ID PLUS PLUS RPARENT LCURBRACE declaracion_sentencias RCURBRACE
    (95) sentfor -> FOR LPARENT ID . EQUAL expsimple CIERRE cond CIERRE ID MINUS MINUS RPARENT LCURBRACE declaracion_sentencias RCURBRACE

    EQUAL           shift and go to state 147


state 116

    (96) sentwhile -> WHILE LPARENT cond . RPARENT LCURBRACE declaracion_sentencias RCURBRACE
    (64) cond -> cond . opcomparacion cond
    (65) cond -> cond . oplogicos cond
    (37) opcomparacion -> . IGUAL
    (38) opcomparacion -> . NOIGUAL
    (39) opcomparacion -> . IDENTICO
    (40) opcomparacion -> . MAYOR
    (41) opcomparacion -> . MAYORIG
    (42) opcomparacion -> . MENOR
    (43) opcomparacion -> . MENORIG
    (30) oplogicos -> . AND
    (31) oplogicos -> . OR
    (32) oplogicos -> . XOR
    (33) oplogicos -> . NOT

    RPARENT         shift and go to state 148
    IGUAL           shift and go to state 84
    NOIGUAL         shift and go to state 85
    IDENTICO        shift and go to state 86
    MAYOR           shift and go to state 87
    MAYORIG         shift and go to state 88
    MENOR           shift and go to state 89
    MENORIG         shift and go to state 90
    AND             shift and go to state 91
    OR              shift and go to state 92
    XOR             shift and go to state 93
    NOT             shift and go to state 94

    opcomparacion                  shift and go to state 82
    oplogicos                      shift and go to state 83

state 117

    (97) sentdowhile -> DO LCURBRACE declaracion_sentencias . RCURBRACE WHILE LPARENT cond RPARENT CIERRE

    RCURBRACE       shift and go to state 149


state 118

    (25) sentassign -> ID EQUAL exp CIERRE .

    ID              reduce using rule 25 (sentassign -> ID EQUAL exp CIERRE .)
    NFUNCTION       reduce using rule 25 (sentassign -> ID EQUAL exp CIERRE .)
    IF              reduce using rule 25 (sentassign -> ID EQUAL exp CIERRE .)
    ECHO            reduce using rule 25 (sentassign -> ID EQUAL exp CIERRE .)
    FUNCTION        reduce using rule 25 (sentassign -> ID EQUAL exp CIERRE .)
    RETURN          reduce using rule 25 (sentassign -> ID EQUAL exp CIERRE .)
    FOR             reduce using rule 25 (sentassign -> ID EQUAL exp CIERRE .)
    WHILE           reduce using rule 25 (sentassign -> ID EQUAL exp CIERRE .)
    DO              reduce using rule 25 (sentassign -> ID EQUAL exp CIERRE .)
    $end            reduce using rule 25 (sentassign -> ID EQUAL exp CIERRE .)
    RCURBRACE       reduce using rule 25 (sentassign -> ID EQUAL exp CIERRE .)


state 119

    (51) factor -> LPARENT . expsimple RPARENT
    (44) expsimple -> . expsimple opsuma term
    (45) expsimple -> . term
    (46) term -> . term opmult factor
    (47) term -> . factor
    (48) factor -> . INTEGER
    (49) factor -> . ID
    (50) factor -> . call_function
    (51) factor -> . LPARENT expsimple RPARENT
    (91) call_function -> . NFUNCTION
    (92) call_function -> . NFUNCTION LPARENT arg RPARENT

    INTEGER         shift and go to state 65
    ID              shift and go to state 62
    LPARENT         shift and go to state 119
    NFUNCTION       shift and go to state 16

    expsimple                      shift and go to state 150
    term                           shift and go to state 45
    factor                         shift and go to state 47
    call_function                  shift and go to state 51

state 120

    (35) exp -> LPARENT expsimple . opcomparacion expsimple RPARENT
    (51) factor -> LPARENT expsimple . RPARENT
    (44) expsimple -> expsimple . opsuma term
    (37) opcomparacion -> . IGUAL
    (38) opcomparacion -> . NOIGUAL
    (39) opcomparacion -> . IDENTICO
    (40) opcomparacion -> . MAYOR
    (41) opcomparacion -> . MAYORIG
    (42) opcomparacion -> . MENOR
    (43) opcomparacion -> . MENORIG
    (57) opsuma -> . PLUS
    (58) opsuma -> . MINUS

    RPARENT         shift and go to state 137
    IGUAL           shift and go to state 84
    NOIGUAL         shift and go to state 85
    IDENTICO        shift and go to state 86
    MAYOR           shift and go to state 87
    MAYORIG         shift and go to state 88
    MENOR           shift and go to state 89
    MENORIG         shift and go to state 90
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98

    opcomparacion                  shift and go to state 151
    opsuma                         shift and go to state 96

state 121

    (26) sentassign -> ID PLUS PLUS CIERRE .

    ID              reduce using rule 26 (sentassign -> ID PLUS PLUS CIERRE .)
    NFUNCTION       reduce using rule 26 (sentassign -> ID PLUS PLUS CIERRE .)
    IF              reduce using rule 26 (sentassign -> ID PLUS PLUS CIERRE .)
    ECHO            reduce using rule 26 (sentassign -> ID PLUS PLUS CIERRE .)
    FUNCTION        reduce using rule 26 (sentassign -> ID PLUS PLUS CIERRE .)
    RETURN          reduce using rule 26 (sentassign -> ID PLUS PLUS CIERRE .)
    FOR             reduce using rule 26 (sentassign -> ID PLUS PLUS CIERRE .)
    WHILE           reduce using rule 26 (sentassign -> ID PLUS PLUS CIERRE .)
    DO              reduce using rule 26 (sentassign -> ID PLUS PLUS CIERRE .)
    $end            reduce using rule 26 (sentassign -> ID PLUS PLUS CIERRE .)
    RCURBRACE       reduce using rule 26 (sentassign -> ID PLUS PLUS CIERRE .)


state 122

    (27) sentassign -> ID MINUS MINUS CIERRE .

    ID              reduce using rule 27 (sentassign -> ID MINUS MINUS CIERRE .)
    NFUNCTION       reduce using rule 27 (sentassign -> ID MINUS MINUS CIERRE .)
    IF              reduce using rule 27 (sentassign -> ID MINUS MINUS CIERRE .)
    ECHO            reduce using rule 27 (sentassign -> ID MINUS MINUS CIERRE .)
    FUNCTION        reduce using rule 27 (sentassign -> ID MINUS MINUS CIERRE .)
    RETURN          reduce using rule 27 (sentassign -> ID MINUS MINUS CIERRE .)
    FOR             reduce using rule 27 (sentassign -> ID MINUS MINUS CIERRE .)
    WHILE           reduce using rule 27 (sentassign -> ID MINUS MINUS CIERRE .)
    DO              reduce using rule 27 (sentassign -> ID MINUS MINUS CIERRE .)
    $end            reduce using rule 27 (sentassign -> ID MINUS MINUS CIERRE .)
    RCURBRACE       reduce using rule 27 (sentassign -> ID MINUS MINUS CIERRE .)


state 123

    (92) call_function -> NFUNCTION LPARENT arg RPARENT .

    CIERRE          reduce using rule 92 (call_function -> NFUNCTION LPARENT arg RPARENT .)
    TIMES           reduce using rule 92 (call_function -> NFUNCTION LPARENT arg RPARENT .)
    DIV             reduce using rule 92 (call_function -> NFUNCTION LPARENT arg RPARENT .)
    MODULO          reduce using rule 92 (call_function -> NFUNCTION LPARENT arg RPARENT .)
    EXPONENCIACION  reduce using rule 92 (call_function -> NFUNCTION LPARENT arg RPARENT .)
    IGUAL           reduce using rule 92 (call_function -> NFUNCTION LPARENT arg RPARENT .)
    NOIGUAL         reduce using rule 92 (call_function -> NFUNCTION LPARENT arg RPARENT .)
    IDENTICO        reduce using rule 92 (call_function -> NFUNCTION LPARENT arg RPARENT .)
    MAYOR           reduce using rule 92 (call_function -> NFUNCTION LPARENT arg RPARENT .)
    MAYORIG         reduce using rule 92 (call_function -> NFUNCTION LPARENT arg RPARENT .)
    MENOR           reduce using rule 92 (call_function -> NFUNCTION LPARENT arg RPARENT .)
    MENORIG         reduce using rule 92 (call_function -> NFUNCTION LPARENT arg RPARENT .)
    PLUS            reduce using rule 92 (call_function -> NFUNCTION LPARENT arg RPARENT .)
    MINUS           reduce using rule 92 (call_function -> NFUNCTION LPARENT arg RPARENT .)
    AND             reduce using rule 92 (call_function -> NFUNCTION LPARENT arg RPARENT .)
    OR              reduce using rule 92 (call_function -> NFUNCTION LPARENT arg RPARENT .)
    XOR             reduce using rule 92 (call_function -> NFUNCTION LPARENT arg RPARENT .)
    NOT             reduce using rule 92 (call_function -> NFUNCTION LPARENT arg RPARENT .)
    RPARENT         reduce using rule 92 (call_function -> NFUNCTION LPARENT arg RPARENT .)
    COMMA           reduce using rule 92 (call_function -> NFUNCTION LPARENT arg RPARENT .)


state 124

    (83) arg -> var_declaration_gen COMMA . arg
    (77) arg -> . var_declaration_gen
    (78) arg -> . type
    (79) arg -> . expsimple
    (80) arg -> . type COMMA arg
    (81) arg -> . STRING
    (82) arg -> . STRINGG
    (83) arg -> . var_declaration_gen COMMA arg
    (84) arg -> . STRING COMMA arg
    (85) arg -> . STRINGG COMMA arg
    (86) arg -> .
    (70) var_declaration_gen -> . ID
    (71) var_declaration_gen -> . ID PLUS PLUS
    (72) var_declaration_gen -> . ID MINUS MINUS
    (73) var_declaration_gen -> . MINUS MINUS ID
    (74) var_declaration_gen -> . PLUS PLUS ID
    (75) var_declaration_gen -> . typevar
    (76) var_declaration_gen -> . exp
    (68) type -> . typevar
    (69) type -> . var_declaration_gen
    (44) expsimple -> . expsimple opsuma term
    (45) expsimple -> . term
    (52) typevar -> . INTEGER
    (53) typevar -> . STRING
    (54) typevar -> . STRINGG
    (55) typevar -> . TRUE
    (56) typevar -> . FALSE
    (34) exp -> . expsimple opcomparacion expsimple
    (35) exp -> . LPARENT expsimple opcomparacion expsimple RPARENT
    (36) exp -> . expsimple
    (46) term -> . term opmult factor
    (47) term -> . factor
    (48) factor -> . INTEGER
    (49) factor -> . ID
    (50) factor -> . call_function
    (51) factor -> . LPARENT expsimple RPARENT
    (91) call_function -> . NFUNCTION
    (92) call_function -> . NFUNCTION LPARENT arg RPARENT

    STRING          shift and go to state 72
    STRINGG         shift and go to state 73
    RPARENT         reduce using rule 86 (arg -> .)
    ID              shift and go to state 48
    MINUS           shift and go to state 50
    PLUS            shift and go to state 49
    INTEGER         shift and go to state 37
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    LPARENT         shift and go to state 64
    NFUNCTION       shift and go to state 16

    var_declaration_gen            shift and go to state 69
    arg                            shift and go to state 152
    type                           shift and go to state 70
    expsimple                      shift and go to state 71
    typevar                        shift and go to state 74
    exp                            shift and go to state 57
    term                           shift and go to state 45
    factor                         shift and go to state 47
    call_function                  shift and go to state 51

state 125

    (80) arg -> type COMMA . arg
    (77) arg -> . var_declaration_gen
    (78) arg -> . type
    (79) arg -> . expsimple
    (80) arg -> . type COMMA arg
    (81) arg -> . STRING
    (82) arg -> . STRINGG
    (83) arg -> . var_declaration_gen COMMA arg
    (84) arg -> . STRING COMMA arg
    (85) arg -> . STRINGG COMMA arg
    (86) arg -> .
    (70) var_declaration_gen -> . ID
    (71) var_declaration_gen -> . ID PLUS PLUS
    (72) var_declaration_gen -> . ID MINUS MINUS
    (73) var_declaration_gen -> . MINUS MINUS ID
    (74) var_declaration_gen -> . PLUS PLUS ID
    (75) var_declaration_gen -> . typevar
    (76) var_declaration_gen -> . exp
    (68) type -> . typevar
    (69) type -> . var_declaration_gen
    (44) expsimple -> . expsimple opsuma term
    (45) expsimple -> . term
    (52) typevar -> . INTEGER
    (53) typevar -> . STRING
    (54) typevar -> . STRINGG
    (55) typevar -> . TRUE
    (56) typevar -> . FALSE
    (34) exp -> . expsimple opcomparacion expsimple
    (35) exp -> . LPARENT expsimple opcomparacion expsimple RPARENT
    (36) exp -> . expsimple
    (46) term -> . term opmult factor
    (47) term -> . factor
    (48) factor -> . INTEGER
    (49) factor -> . ID
    (50) factor -> . call_function
    (51) factor -> . LPARENT expsimple RPARENT
    (91) call_function -> . NFUNCTION
    (92) call_function -> . NFUNCTION LPARENT arg RPARENT

    STRING          shift and go to state 72
    STRINGG         shift and go to state 73
    RPARENT         reduce using rule 86 (arg -> .)
    ID              shift and go to state 48
    MINUS           shift and go to state 50
    PLUS            shift and go to state 49
    INTEGER         shift and go to state 37
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    LPARENT         shift and go to state 64
    NFUNCTION       shift and go to state 16

    type                           shift and go to state 70
    arg                            shift and go to state 153
    var_declaration_gen            shift and go to state 69
    expsimple                      shift and go to state 71
    typevar                        shift and go to state 74
    exp                            shift and go to state 57
    term                           shift and go to state 45
    factor                         shift and go to state 47
    call_function                  shift and go to state 51

state 126

    (84) arg -> STRING COMMA . arg
    (77) arg -> . var_declaration_gen
    (78) arg -> . type
    (79) arg -> . expsimple
    (80) arg -> . type COMMA arg
    (81) arg -> . STRING
    (82) arg -> . STRINGG
    (83) arg -> . var_declaration_gen COMMA arg
    (84) arg -> . STRING COMMA arg
    (85) arg -> . STRINGG COMMA arg
    (86) arg -> .
    (70) var_declaration_gen -> . ID
    (71) var_declaration_gen -> . ID PLUS PLUS
    (72) var_declaration_gen -> . ID MINUS MINUS
    (73) var_declaration_gen -> . MINUS MINUS ID
    (74) var_declaration_gen -> . PLUS PLUS ID
    (75) var_declaration_gen -> . typevar
    (76) var_declaration_gen -> . exp
    (68) type -> . typevar
    (69) type -> . var_declaration_gen
    (44) expsimple -> . expsimple opsuma term
    (45) expsimple -> . term
    (52) typevar -> . INTEGER
    (53) typevar -> . STRING
    (54) typevar -> . STRINGG
    (55) typevar -> . TRUE
    (56) typevar -> . FALSE
    (34) exp -> . expsimple opcomparacion expsimple
    (35) exp -> . LPARENT expsimple opcomparacion expsimple RPARENT
    (36) exp -> . expsimple
    (46) term -> . term opmult factor
    (47) term -> . factor
    (48) factor -> . INTEGER
    (49) factor -> . ID
    (50) factor -> . call_function
    (51) factor -> . LPARENT expsimple RPARENT
    (91) call_function -> . NFUNCTION
    (92) call_function -> . NFUNCTION LPARENT arg RPARENT

    STRING          shift and go to state 72
    STRINGG         shift and go to state 73
    RPARENT         reduce using rule 86 (arg -> .)
    ID              shift and go to state 48
    MINUS           shift and go to state 50
    PLUS            shift and go to state 49
    INTEGER         shift and go to state 37
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    LPARENT         shift and go to state 64
    NFUNCTION       shift and go to state 16

    arg                            shift and go to state 154
    var_declaration_gen            shift and go to state 69
    type                           shift and go to state 70
    expsimple                      shift and go to state 71
    typevar                        shift and go to state 74
    exp                            shift and go to state 57
    term                           shift and go to state 45
    factor                         shift and go to state 47
    call_function                  shift and go to state 51

state 127

    (85) arg -> STRINGG COMMA . arg
    (77) arg -> . var_declaration_gen
    (78) arg -> . type
    (79) arg -> . expsimple
    (80) arg -> . type COMMA arg
    (81) arg -> . STRING
    (82) arg -> . STRINGG
    (83) arg -> . var_declaration_gen COMMA arg
    (84) arg -> . STRING COMMA arg
    (85) arg -> . STRINGG COMMA arg
    (86) arg -> .
    (70) var_declaration_gen -> . ID
    (71) var_declaration_gen -> . ID PLUS PLUS
    (72) var_declaration_gen -> . ID MINUS MINUS
    (73) var_declaration_gen -> . MINUS MINUS ID
    (74) var_declaration_gen -> . PLUS PLUS ID
    (75) var_declaration_gen -> . typevar
    (76) var_declaration_gen -> . exp
    (68) type -> . typevar
    (69) type -> . var_declaration_gen
    (44) expsimple -> . expsimple opsuma term
    (45) expsimple -> . term
    (52) typevar -> . INTEGER
    (53) typevar -> . STRING
    (54) typevar -> . STRINGG
    (55) typevar -> . TRUE
    (56) typevar -> . FALSE
    (34) exp -> . expsimple opcomparacion expsimple
    (35) exp -> . LPARENT expsimple opcomparacion expsimple RPARENT
    (36) exp -> . expsimple
    (46) term -> . term opmult factor
    (47) term -> . factor
    (48) factor -> . INTEGER
    (49) factor -> . ID
    (50) factor -> . call_function
    (51) factor -> . LPARENT expsimple RPARENT
    (91) call_function -> . NFUNCTION
    (92) call_function -> . NFUNCTION LPARENT arg RPARENT

    STRING          shift and go to state 72
    STRINGG         shift and go to state 73
    RPARENT         reduce using rule 86 (arg -> .)
    ID              shift and go to state 48
    MINUS           shift and go to state 50
    PLUS            shift and go to state 49
    INTEGER         shift and go to state 37
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    LPARENT         shift and go to state 64
    NFUNCTION       shift and go to state 16

    arg                            shift and go to state 155
    var_declaration_gen            shift and go to state 69
    type                           shift and go to state 70
    expsimple                      shift and go to state 71
    typevar                        shift and go to state 74
    exp                            shift and go to state 57
    term                           shift and go to state 45
    factor                         shift and go to state 47
    call_function                  shift and go to state 51

state 128

    (21) auxsentif -> ELSE IF . genif auxsentif
    (24) genif -> . LPARENT cond RPARENT LCURBRACE declaracion_sentencias RCURBRACE

    LPARENT         shift and go to state 33

    genif                          shift and go to state 156

state 129

    (22) auxsentif -> ELSE LCURBRACE . declaracion_sentencias RCURBRACE
    (4) declaracion_sentencias -> . sentencias declaracion_sentencias
    (5) declaracion_sentencias -> . sentencias
    (6) sentencias -> . sentassign
    (7) sentencias -> . call_function CIERRE
    (8) sentencias -> . sentif
    (9) sentencias -> . sentecho
    (10) sentencias -> . sentfunc
    (11) sentencias -> . sentreturn
    (12) sentencias -> . sentfor
    (13) sentencias -> . sentwhile
    (14) sentencias -> . sentdowhile
    (25) sentassign -> . ID EQUAL exp CIERRE
    (26) sentassign -> . ID PLUS PLUS CIERRE
    (27) sentassign -> . ID MINUS MINUS CIERRE
    (91) call_function -> . NFUNCTION
    (92) call_function -> . NFUNCTION LPARENT arg RPARENT
    (20) sentif -> . IF genif auxsentif
    (17) sentecho -> . ECHO typevar CIERRE
    (18) sentecho -> . ECHO exp CIERRE
    (19) sentecho -> . ECHO cond CIERRE
    (90) sentfunc -> . FUNCTION NFUNCTION LPARENT argfunc RPARENT LCURBRACE declaracion_sentencias RCURBRACE
    (15) sentreturn -> . RETURN type CIERRE
    (16) sentreturn -> . RETURN cond CIERRE
    (93) sentfor -> . FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE expsimple RPARENT LCURBRACE declaracion_sentencias RCURBRACE
    (94) sentfor -> . FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE ID PLUS PLUS RPARENT LCURBRACE declaracion_sentencias RCURBRACE
    (95) sentfor -> . FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE ID MINUS MINUS RPARENT LCURBRACE declaracion_sentencias RCURBRACE
    (96) sentwhile -> . WHILE LPARENT cond RPARENT LCURBRACE declaracion_sentencias RCURBRACE
    (97) sentdowhile -> . DO LCURBRACE declaracion_sentencias RCURBRACE WHILE LPARENT cond RPARENT CIERRE

    ID              shift and go to state 15
    NFUNCTION       shift and go to state 16
    IF              shift and go to state 17
    ECHO            shift and go to state 18
    FUNCTION        shift and go to state 19
    RETURN          shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    DO              shift and go to state 23

    declaracion_sentencias         shift and go to state 157
    sentencias                     shift and go to state 5
    sentassign                     shift and go to state 6
    call_function                  shift and go to state 7
    sentif                         shift and go to state 8
    sentecho                       shift and go to state 9
    sentfunc                       shift and go to state 10
    sentreturn                     shift and go to state 11
    sentfor                        shift and go to state 12
    sentwhile                      shift and go to state 13
    sentdowhile                    shift and go to state 14

state 130

    (24) genif -> LPARENT cond RPARENT . LCURBRACE declaracion_sentencias RCURBRACE

    LCURBRACE       shift and go to state 158


state 131

    (64) cond -> cond opcomparacion cond .
    (64) cond -> cond . opcomparacion cond
    (65) cond -> cond . oplogicos cond
    (37) opcomparacion -> . IGUAL
    (38) opcomparacion -> . NOIGUAL
    (39) opcomparacion -> . IDENTICO
    (40) opcomparacion -> . MAYOR
    (41) opcomparacion -> . MAYORIG
    (42) opcomparacion -> . MENOR
    (43) opcomparacion -> . MENORIG
    (30) oplogicos -> . AND
    (31) oplogicos -> . OR
    (32) oplogicos -> . XOR
    (33) oplogicos -> . NOT

  ! shift/reduce conflict for IGUAL resolved as shift
  ! shift/reduce conflict for NOIGUAL resolved as shift
  ! shift/reduce conflict for IDENTICO resolved as shift
  ! shift/reduce conflict for MAYOR resolved as shift
  ! shift/reduce conflict for MAYORIG resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for MENORIG resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    CIERRE          reduce using rule 64 (cond -> cond opcomparacion cond .)
    RPARENT         reduce using rule 64 (cond -> cond opcomparacion cond .)
    IGUAL           shift and go to state 84
    NOIGUAL         shift and go to state 85
    IDENTICO        shift and go to state 86
    MAYOR           shift and go to state 87
    MAYORIG         shift and go to state 88
    MENOR           shift and go to state 89
    MENORIG         shift and go to state 90
    AND             shift and go to state 91
    OR              shift and go to state 92
    XOR             shift and go to state 93
    NOT             shift and go to state 94

  ! IGUAL           [ reduce using rule 64 (cond -> cond opcomparacion cond .) ]
  ! NOIGUAL         [ reduce using rule 64 (cond -> cond opcomparacion cond .) ]
  ! IDENTICO        [ reduce using rule 64 (cond -> cond opcomparacion cond .) ]
  ! MAYOR           [ reduce using rule 64 (cond -> cond opcomparacion cond .) ]
  ! MAYORIG         [ reduce using rule 64 (cond -> cond opcomparacion cond .) ]
  ! MENOR           [ reduce using rule 64 (cond -> cond opcomparacion cond .) ]
  ! MENORIG         [ reduce using rule 64 (cond -> cond opcomparacion cond .) ]
  ! AND             [ reduce using rule 64 (cond -> cond opcomparacion cond .) ]
  ! OR              [ reduce using rule 64 (cond -> cond opcomparacion cond .) ]
  ! XOR             [ reduce using rule 64 (cond -> cond opcomparacion cond .) ]
  ! NOT             [ reduce using rule 64 (cond -> cond opcomparacion cond .) ]

    opcomparacion                  shift and go to state 82
    oplogicos                      shift and go to state 83

state 132

    (65) cond -> cond oplogicos cond .
    (64) cond -> cond . opcomparacion cond
    (65) cond -> cond . oplogicos cond
    (37) opcomparacion -> . IGUAL
    (38) opcomparacion -> . NOIGUAL
    (39) opcomparacion -> . IDENTICO
    (40) opcomparacion -> . MAYOR
    (41) opcomparacion -> . MAYORIG
    (42) opcomparacion -> . MENOR
    (43) opcomparacion -> . MENORIG
    (30) oplogicos -> . AND
    (31) oplogicos -> . OR
    (32) oplogicos -> . XOR
    (33) oplogicos -> . NOT

  ! shift/reduce conflict for IGUAL resolved as shift
  ! shift/reduce conflict for NOIGUAL resolved as shift
  ! shift/reduce conflict for IDENTICO resolved as shift
  ! shift/reduce conflict for MAYOR resolved as shift
  ! shift/reduce conflict for MAYORIG resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for MENORIG resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    CIERRE          reduce using rule 65 (cond -> cond oplogicos cond .)
    RPARENT         reduce using rule 65 (cond -> cond oplogicos cond .)
    IGUAL           shift and go to state 84
    NOIGUAL         shift and go to state 85
    IDENTICO        shift and go to state 86
    MAYOR           shift and go to state 87
    MAYORIG         shift and go to state 88
    MENOR           shift and go to state 89
    MENORIG         shift and go to state 90
    AND             shift and go to state 91
    OR              shift and go to state 92
    XOR             shift and go to state 93
    NOT             shift and go to state 94

  ! IGUAL           [ reduce using rule 65 (cond -> cond oplogicos cond .) ]
  ! NOIGUAL         [ reduce using rule 65 (cond -> cond oplogicos cond .) ]
  ! IDENTICO        [ reduce using rule 65 (cond -> cond oplogicos cond .) ]
  ! MAYOR           [ reduce using rule 65 (cond -> cond oplogicos cond .) ]
  ! MAYORIG         [ reduce using rule 65 (cond -> cond oplogicos cond .) ]
  ! MENOR           [ reduce using rule 65 (cond -> cond oplogicos cond .) ]
  ! MENORIG         [ reduce using rule 65 (cond -> cond oplogicos cond .) ]
  ! AND             [ reduce using rule 65 (cond -> cond oplogicos cond .) ]
  ! OR              [ reduce using rule 65 (cond -> cond oplogicos cond .) ]
  ! XOR             [ reduce using rule 65 (cond -> cond oplogicos cond .) ]
  ! NOT             [ reduce using rule 65 (cond -> cond oplogicos cond .) ]

    oplogicos                      shift and go to state 83
    opcomparacion                  shift and go to state 82

state 133

    (34) exp -> expsimple opcomparacion expsimple .
    (44) expsimple -> expsimple . opsuma term
    (57) opsuma -> . PLUS
    (58) opsuma -> . MINUS

    CIERRE          reduce using rule 34 (exp -> expsimple opcomparacion expsimple .)
    IGUAL           reduce using rule 34 (exp -> expsimple opcomparacion expsimple .)
    NOIGUAL         reduce using rule 34 (exp -> expsimple opcomparacion expsimple .)
    IDENTICO        reduce using rule 34 (exp -> expsimple opcomparacion expsimple .)
    MAYOR           reduce using rule 34 (exp -> expsimple opcomparacion expsimple .)
    MAYORIG         reduce using rule 34 (exp -> expsimple opcomparacion expsimple .)
    MENOR           reduce using rule 34 (exp -> expsimple opcomparacion expsimple .)
    MENORIG         reduce using rule 34 (exp -> expsimple opcomparacion expsimple .)
    AND             reduce using rule 34 (exp -> expsimple opcomparacion expsimple .)
    OR              reduce using rule 34 (exp -> expsimple opcomparacion expsimple .)
    XOR             reduce using rule 34 (exp -> expsimple opcomparacion expsimple .)
    NOT             reduce using rule 34 (exp -> expsimple opcomparacion expsimple .)
    COMMA           reduce using rule 34 (exp -> expsimple opcomparacion expsimple .)
    RPARENT         reduce using rule 34 (exp -> expsimple opcomparacion expsimple .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98

    opsuma                         shift and go to state 96

state 134

    (44) expsimple -> expsimple opsuma term .
    (46) term -> term . opmult factor
    (59) opmult -> . TIMES
    (60) opmult -> . DIV
    (61) opmult -> . MODULO
    (62) opmult -> . EXPONENCIACION

    IGUAL           reduce using rule 44 (expsimple -> expsimple opsuma term .)
    NOIGUAL         reduce using rule 44 (expsimple -> expsimple opsuma term .)
    IDENTICO        reduce using rule 44 (expsimple -> expsimple opsuma term .)
    MAYOR           reduce using rule 44 (expsimple -> expsimple opsuma term .)
    MAYORIG         reduce using rule 44 (expsimple -> expsimple opsuma term .)
    MENOR           reduce using rule 44 (expsimple -> expsimple opsuma term .)
    MENORIG         reduce using rule 44 (expsimple -> expsimple opsuma term .)
    PLUS            reduce using rule 44 (expsimple -> expsimple opsuma term .)
    MINUS           reduce using rule 44 (expsimple -> expsimple opsuma term .)
    CIERRE          reduce using rule 44 (expsimple -> expsimple opsuma term .)
    AND             reduce using rule 44 (expsimple -> expsimple opsuma term .)
    OR              reduce using rule 44 (expsimple -> expsimple opsuma term .)
    XOR             reduce using rule 44 (expsimple -> expsimple opsuma term .)
    NOT             reduce using rule 44 (expsimple -> expsimple opsuma term .)
    RPARENT         reduce using rule 44 (expsimple -> expsimple opsuma term .)
    COMMA           reduce using rule 44 (expsimple -> expsimple opsuma term .)
    TIMES           shift and go to state 104
    DIV             shift and go to state 105
    MODULO          shift and go to state 106
    EXPONENCIACION  shift and go to state 107

    opmult                         shift and go to state 103

state 135

    (51) factor -> LPARENT expsimple . RPARENT
    (35) exp -> LPARENT expsimple . opcomparacion expsimple RPARENT
    (44) expsimple -> expsimple . opsuma term
    (34) exp -> expsimple . opcomparacion expsimple
    (36) exp -> expsimple .
    (37) opcomparacion -> . IGUAL
    (38) opcomparacion -> . NOIGUAL
    (39) opcomparacion -> . IDENTICO
    (40) opcomparacion -> . MAYOR
    (41) opcomparacion -> . MAYORIG
    (42) opcomparacion -> . MENOR
    (43) opcomparacion -> . MENORIG
    (57) opsuma -> . PLUS
    (58) opsuma -> . MINUS

  ! shift/reduce conflict for RPARENT resolved as shift
  ! shift/reduce conflict for IGUAL resolved as shift
  ! shift/reduce conflict for NOIGUAL resolved as shift
  ! shift/reduce conflict for IDENTICO resolved as shift
  ! shift/reduce conflict for MAYOR resolved as shift
  ! shift/reduce conflict for MAYORIG resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for MENORIG resolved as shift
    RPARENT         shift and go to state 137
    AND             reduce using rule 36 (exp -> expsimple .)
    OR              reduce using rule 36 (exp -> expsimple .)
    XOR             reduce using rule 36 (exp -> expsimple .)
    NOT             reduce using rule 36 (exp -> expsimple .)
    IGUAL           shift and go to state 84
    NOIGUAL         shift and go to state 85
    IDENTICO        shift and go to state 86
    MAYOR           shift and go to state 87
    MAYORIG         shift and go to state 88
    MENOR           shift and go to state 89
    MENORIG         shift and go to state 90
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98

  ! RPARENT         [ reduce using rule 36 (exp -> expsimple .) ]
  ! IGUAL           [ reduce using rule 36 (exp -> expsimple .) ]
  ! NOIGUAL         [ reduce using rule 36 (exp -> expsimple .) ]
  ! IDENTICO        [ reduce using rule 36 (exp -> expsimple .) ]
  ! MAYOR           [ reduce using rule 36 (exp -> expsimple .) ]
  ! MAYORIG         [ reduce using rule 36 (exp -> expsimple .) ]
  ! MENOR           [ reduce using rule 36 (exp -> expsimple .) ]
  ! MENORIG         [ reduce using rule 36 (exp -> expsimple .) ]

    opcomparacion                  shift and go to state 136
    opsuma                         shift and go to state 96

state 136

    (35) exp -> LPARENT expsimple opcomparacion . expsimple RPARENT
    (34) exp -> expsimple opcomparacion . expsimple
    (44) expsimple -> . expsimple opsuma term
    (45) expsimple -> . term
    (46) term -> . term opmult factor
    (47) term -> . factor
    (48) factor -> . INTEGER
    (49) factor -> . ID
    (50) factor -> . call_function
    (51) factor -> . LPARENT expsimple RPARENT
    (91) call_function -> . NFUNCTION
    (92) call_function -> . NFUNCTION LPARENT arg RPARENT

    INTEGER         shift and go to state 65
    ID              shift and go to state 62
    LPARENT         shift and go to state 119
    NFUNCTION       shift and go to state 16

    expsimple                      shift and go to state 159
    term                           shift and go to state 45
    factor                         shift and go to state 47
    call_function                  shift and go to state 51

state 137

    (51) factor -> LPARENT expsimple RPARENT .

    TIMES           reduce using rule 51 (factor -> LPARENT expsimple RPARENT .)
    DIV             reduce using rule 51 (factor -> LPARENT expsimple RPARENT .)
    MODULO          reduce using rule 51 (factor -> LPARENT expsimple RPARENT .)
    EXPONENCIACION  reduce using rule 51 (factor -> LPARENT expsimple RPARENT .)
    IGUAL           reduce using rule 51 (factor -> LPARENT expsimple RPARENT .)
    NOIGUAL         reduce using rule 51 (factor -> LPARENT expsimple RPARENT .)
    IDENTICO        reduce using rule 51 (factor -> LPARENT expsimple RPARENT .)
    MAYOR           reduce using rule 51 (factor -> LPARENT expsimple RPARENT .)
    MAYORIG         reduce using rule 51 (factor -> LPARENT expsimple RPARENT .)
    MENOR           reduce using rule 51 (factor -> LPARENT expsimple RPARENT .)
    MENORIG         reduce using rule 51 (factor -> LPARENT expsimple RPARENT .)
    PLUS            reduce using rule 51 (factor -> LPARENT expsimple RPARENT .)
    MINUS           reduce using rule 51 (factor -> LPARENT expsimple RPARENT .)
    CIERRE          reduce using rule 51 (factor -> LPARENT expsimple RPARENT .)
    AND             reduce using rule 51 (factor -> LPARENT expsimple RPARENT .)
    OR              reduce using rule 51 (factor -> LPARENT expsimple RPARENT .)
    XOR             reduce using rule 51 (factor -> LPARENT expsimple RPARENT .)
    NOT             reduce using rule 51 (factor -> LPARENT expsimple RPARENT .)
    RPARENT         reduce using rule 51 (factor -> LPARENT expsimple RPARENT .)
    COMMA           reduce using rule 51 (factor -> LPARENT expsimple RPARENT .)


state 138

    (66) cond -> LPARENT type RPARENT .

    CIERRE          reduce using rule 66 (cond -> LPARENT type RPARENT .)
    IGUAL           reduce using rule 66 (cond -> LPARENT type RPARENT .)
    NOIGUAL         reduce using rule 66 (cond -> LPARENT type RPARENT .)
    IDENTICO        reduce using rule 66 (cond -> LPARENT type RPARENT .)
    MAYOR           reduce using rule 66 (cond -> LPARENT type RPARENT .)
    MAYORIG         reduce using rule 66 (cond -> LPARENT type RPARENT .)
    MENOR           reduce using rule 66 (cond -> LPARENT type RPARENT .)
    MENORIG         reduce using rule 66 (cond -> LPARENT type RPARENT .)
    AND             reduce using rule 66 (cond -> LPARENT type RPARENT .)
    OR              reduce using rule 66 (cond -> LPARENT type RPARENT .)
    XOR             reduce using rule 66 (cond -> LPARENT type RPARENT .)
    NOT             reduce using rule 66 (cond -> LPARENT type RPARENT .)
    RPARENT         reduce using rule 66 (cond -> LPARENT type RPARENT .)


state 139

    (67) cond -> LPARENT cond RPARENT .

    CIERRE          reduce using rule 67 (cond -> LPARENT cond RPARENT .)
    IGUAL           reduce using rule 67 (cond -> LPARENT cond RPARENT .)
    NOIGUAL         reduce using rule 67 (cond -> LPARENT cond RPARENT .)
    IDENTICO        reduce using rule 67 (cond -> LPARENT cond RPARENT .)
    MAYOR           reduce using rule 67 (cond -> LPARENT cond RPARENT .)
    MAYORIG         reduce using rule 67 (cond -> LPARENT cond RPARENT .)
    MENOR           reduce using rule 67 (cond -> LPARENT cond RPARENT .)
    MENORIG         reduce using rule 67 (cond -> LPARENT cond RPARENT .)
    AND             reduce using rule 67 (cond -> LPARENT cond RPARENT .)
    OR              reduce using rule 67 (cond -> LPARENT cond RPARENT .)
    XOR             reduce using rule 67 (cond -> LPARENT cond RPARENT .)
    NOT             reduce using rule 67 (cond -> LPARENT cond RPARENT .)
    RPARENT         reduce using rule 67 (cond -> LPARENT cond RPARENT .)


state 140

    (46) term -> term opmult factor .

    TIMES           reduce using rule 46 (term -> term opmult factor .)
    DIV             reduce using rule 46 (term -> term opmult factor .)
    MODULO          reduce using rule 46 (term -> term opmult factor .)
    EXPONENCIACION  reduce using rule 46 (term -> term opmult factor .)
    IGUAL           reduce using rule 46 (term -> term opmult factor .)
    NOIGUAL         reduce using rule 46 (term -> term opmult factor .)
    IDENTICO        reduce using rule 46 (term -> term opmult factor .)
    MAYOR           reduce using rule 46 (term -> term opmult factor .)
    MAYORIG         reduce using rule 46 (term -> term opmult factor .)
    MENOR           reduce using rule 46 (term -> term opmult factor .)
    MENORIG         reduce using rule 46 (term -> term opmult factor .)
    PLUS            reduce using rule 46 (term -> term opmult factor .)
    MINUS           reduce using rule 46 (term -> term opmult factor .)
    CIERRE          reduce using rule 46 (term -> term opmult factor .)
    AND             reduce using rule 46 (term -> term opmult factor .)
    OR              reduce using rule 46 (term -> term opmult factor .)
    XOR             reduce using rule 46 (term -> term opmult factor .)
    NOT             reduce using rule 46 (term -> term opmult factor .)
    RPARENT         reduce using rule 46 (term -> term opmult factor .)
    COMMA           reduce using rule 46 (term -> term opmult factor .)


state 141

    (71) var_declaration_gen -> ID PLUS PLUS .

    CIERRE          reduce using rule 71 (var_declaration_gen -> ID PLUS PLUS .)
    IGUAL           reduce using rule 71 (var_declaration_gen -> ID PLUS PLUS .)
    NOIGUAL         reduce using rule 71 (var_declaration_gen -> ID PLUS PLUS .)
    IDENTICO        reduce using rule 71 (var_declaration_gen -> ID PLUS PLUS .)
    MAYOR           reduce using rule 71 (var_declaration_gen -> ID PLUS PLUS .)
    MAYORIG         reduce using rule 71 (var_declaration_gen -> ID PLUS PLUS .)
    MENOR           reduce using rule 71 (var_declaration_gen -> ID PLUS PLUS .)
    MENORIG         reduce using rule 71 (var_declaration_gen -> ID PLUS PLUS .)
    AND             reduce using rule 71 (var_declaration_gen -> ID PLUS PLUS .)
    OR              reduce using rule 71 (var_declaration_gen -> ID PLUS PLUS .)
    XOR             reduce using rule 71 (var_declaration_gen -> ID PLUS PLUS .)
    NOT             reduce using rule 71 (var_declaration_gen -> ID PLUS PLUS .)
    COMMA           reduce using rule 71 (var_declaration_gen -> ID PLUS PLUS .)
    RPARENT         reduce using rule 71 (var_declaration_gen -> ID PLUS PLUS .)


state 142

    (72) var_declaration_gen -> ID MINUS MINUS .

    CIERRE          reduce using rule 72 (var_declaration_gen -> ID MINUS MINUS .)
    IGUAL           reduce using rule 72 (var_declaration_gen -> ID MINUS MINUS .)
    NOIGUAL         reduce using rule 72 (var_declaration_gen -> ID MINUS MINUS .)
    IDENTICO        reduce using rule 72 (var_declaration_gen -> ID MINUS MINUS .)
    MAYOR           reduce using rule 72 (var_declaration_gen -> ID MINUS MINUS .)
    MAYORIG         reduce using rule 72 (var_declaration_gen -> ID MINUS MINUS .)
    MENOR           reduce using rule 72 (var_declaration_gen -> ID MINUS MINUS .)
    MENORIG         reduce using rule 72 (var_declaration_gen -> ID MINUS MINUS .)
    AND             reduce using rule 72 (var_declaration_gen -> ID MINUS MINUS .)
    OR              reduce using rule 72 (var_declaration_gen -> ID MINUS MINUS .)
    XOR             reduce using rule 72 (var_declaration_gen -> ID MINUS MINUS .)
    NOT             reduce using rule 72 (var_declaration_gen -> ID MINUS MINUS .)
    COMMA           reduce using rule 72 (var_declaration_gen -> ID MINUS MINUS .)
    RPARENT         reduce using rule 72 (var_declaration_gen -> ID MINUS MINUS .)


state 143

    (74) var_declaration_gen -> PLUS PLUS ID .

    CIERRE          reduce using rule 74 (var_declaration_gen -> PLUS PLUS ID .)
    IGUAL           reduce using rule 74 (var_declaration_gen -> PLUS PLUS ID .)
    NOIGUAL         reduce using rule 74 (var_declaration_gen -> PLUS PLUS ID .)
    IDENTICO        reduce using rule 74 (var_declaration_gen -> PLUS PLUS ID .)
    MAYOR           reduce using rule 74 (var_declaration_gen -> PLUS PLUS ID .)
    MAYORIG         reduce using rule 74 (var_declaration_gen -> PLUS PLUS ID .)
    MENOR           reduce using rule 74 (var_declaration_gen -> PLUS PLUS ID .)
    MENORIG         reduce using rule 74 (var_declaration_gen -> PLUS PLUS ID .)
    AND             reduce using rule 74 (var_declaration_gen -> PLUS PLUS ID .)
    OR              reduce using rule 74 (var_declaration_gen -> PLUS PLUS ID .)
    XOR             reduce using rule 74 (var_declaration_gen -> PLUS PLUS ID .)
    NOT             reduce using rule 74 (var_declaration_gen -> PLUS PLUS ID .)
    COMMA           reduce using rule 74 (var_declaration_gen -> PLUS PLUS ID .)
    RPARENT         reduce using rule 74 (var_declaration_gen -> PLUS PLUS ID .)


state 144

    (73) var_declaration_gen -> MINUS MINUS ID .

    CIERRE          reduce using rule 73 (var_declaration_gen -> MINUS MINUS ID .)
    IGUAL           reduce using rule 73 (var_declaration_gen -> MINUS MINUS ID .)
    NOIGUAL         reduce using rule 73 (var_declaration_gen -> MINUS MINUS ID .)
    IDENTICO        reduce using rule 73 (var_declaration_gen -> MINUS MINUS ID .)
    MAYOR           reduce using rule 73 (var_declaration_gen -> MINUS MINUS ID .)
    MAYORIG         reduce using rule 73 (var_declaration_gen -> MINUS MINUS ID .)
    MENOR           reduce using rule 73 (var_declaration_gen -> MINUS MINUS ID .)
    MENORIG         reduce using rule 73 (var_declaration_gen -> MINUS MINUS ID .)
    AND             reduce using rule 73 (var_declaration_gen -> MINUS MINUS ID .)
    OR              reduce using rule 73 (var_declaration_gen -> MINUS MINUS ID .)
    XOR             reduce using rule 73 (var_declaration_gen -> MINUS MINUS ID .)
    NOT             reduce using rule 73 (var_declaration_gen -> MINUS MINUS ID .)
    COMMA           reduce using rule 73 (var_declaration_gen -> MINUS MINUS ID .)
    RPARENT         reduce using rule 73 (var_declaration_gen -> MINUS MINUS ID .)


state 145

    (90) sentfunc -> FUNCTION NFUNCTION LPARENT argfunc . RPARENT LCURBRACE declaracion_sentencias RCURBRACE

    RPARENT         shift and go to state 160


state 146

    (87) argfunc -> ID .
    (88) argfunc -> ID . COMMA argfunc

    RPARENT         reduce using rule 87 (argfunc -> ID .)
    COMMA           shift and go to state 161


state 147

    (93) sentfor -> FOR LPARENT ID EQUAL . expsimple CIERRE cond CIERRE expsimple RPARENT LCURBRACE declaracion_sentencias RCURBRACE
    (94) sentfor -> FOR LPARENT ID EQUAL . expsimple CIERRE cond CIERRE ID PLUS PLUS RPARENT LCURBRACE declaracion_sentencias RCURBRACE
    (95) sentfor -> FOR LPARENT ID EQUAL . expsimple CIERRE cond CIERRE ID MINUS MINUS RPARENT LCURBRACE declaracion_sentencias RCURBRACE
    (44) expsimple -> . expsimple opsuma term
    (45) expsimple -> . term
    (46) term -> . term opmult factor
    (47) term -> . factor
    (48) factor -> . INTEGER
    (49) factor -> . ID
    (50) factor -> . call_function
    (51) factor -> . LPARENT expsimple RPARENT
    (91) call_function -> . NFUNCTION
    (92) call_function -> . NFUNCTION LPARENT arg RPARENT

    INTEGER         shift and go to state 65
    ID              shift and go to state 62
    LPARENT         shift and go to state 119
    NFUNCTION       shift and go to state 16

    expsimple                      shift and go to state 162
    term                           shift and go to state 45
    factor                         shift and go to state 47
    call_function                  shift and go to state 51

state 148

    (96) sentwhile -> WHILE LPARENT cond RPARENT . LCURBRACE declaracion_sentencias RCURBRACE

    LCURBRACE       shift and go to state 163


state 149

    (97) sentdowhile -> DO LCURBRACE declaracion_sentencias RCURBRACE . WHILE LPARENT cond RPARENT CIERRE

    WHILE           shift and go to state 164


state 150

    (51) factor -> LPARENT expsimple . RPARENT
    (44) expsimple -> expsimple . opsuma term
    (57) opsuma -> . PLUS
    (58) opsuma -> . MINUS

    RPARENT         shift and go to state 137
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98

    opsuma                         shift and go to state 96

state 151

    (35) exp -> LPARENT expsimple opcomparacion . expsimple RPARENT
    (44) expsimple -> . expsimple opsuma term
    (45) expsimple -> . term
    (46) term -> . term opmult factor
    (47) term -> . factor
    (48) factor -> . INTEGER
    (49) factor -> . ID
    (50) factor -> . call_function
    (51) factor -> . LPARENT expsimple RPARENT
    (91) call_function -> . NFUNCTION
    (92) call_function -> . NFUNCTION LPARENT arg RPARENT

    INTEGER         shift and go to state 65
    ID              shift and go to state 62
    LPARENT         shift and go to state 119
    NFUNCTION       shift and go to state 16

    expsimple                      shift and go to state 165
    term                           shift and go to state 45
    factor                         shift and go to state 47
    call_function                  shift and go to state 51

state 152

    (83) arg -> var_declaration_gen COMMA arg .

    RPARENT         reduce using rule 83 (arg -> var_declaration_gen COMMA arg .)


state 153

    (80) arg -> type COMMA arg .

    RPARENT         reduce using rule 80 (arg -> type COMMA arg .)


state 154

    (84) arg -> STRING COMMA arg .

    RPARENT         reduce using rule 84 (arg -> STRING COMMA arg .)


state 155

    (85) arg -> STRINGG COMMA arg .

    RPARENT         reduce using rule 85 (arg -> STRINGG COMMA arg .)


state 156

    (21) auxsentif -> ELSE IF genif . auxsentif
    (21) auxsentif -> . ELSE IF genif auxsentif
    (22) auxsentif -> . ELSE LCURBRACE declaracion_sentencias RCURBRACE
    (23) auxsentif -> . empty
    (99) empty -> .

    ELSE            shift and go to state 76
    ID              reduce using rule 99 (empty -> .)
    NFUNCTION       reduce using rule 99 (empty -> .)
    IF              reduce using rule 99 (empty -> .)
    ECHO            reduce using rule 99 (empty -> .)
    FUNCTION        reduce using rule 99 (empty -> .)
    RETURN          reduce using rule 99 (empty -> .)
    FOR             reduce using rule 99 (empty -> .)
    WHILE           reduce using rule 99 (empty -> .)
    DO              reduce using rule 99 (empty -> .)
    $end            reduce using rule 99 (empty -> .)
    RCURBRACE       reduce using rule 99 (empty -> .)

    auxsentif                      shift and go to state 166
    empty                          shift and go to state 77

state 157

    (22) auxsentif -> ELSE LCURBRACE declaracion_sentencias . RCURBRACE

    RCURBRACE       shift and go to state 167


state 158

    (24) genif -> LPARENT cond RPARENT LCURBRACE . declaracion_sentencias RCURBRACE
    (4) declaracion_sentencias -> . sentencias declaracion_sentencias
    (5) declaracion_sentencias -> . sentencias
    (6) sentencias -> . sentassign
    (7) sentencias -> . call_function CIERRE
    (8) sentencias -> . sentif
    (9) sentencias -> . sentecho
    (10) sentencias -> . sentfunc
    (11) sentencias -> . sentreturn
    (12) sentencias -> . sentfor
    (13) sentencias -> . sentwhile
    (14) sentencias -> . sentdowhile
    (25) sentassign -> . ID EQUAL exp CIERRE
    (26) sentassign -> . ID PLUS PLUS CIERRE
    (27) sentassign -> . ID MINUS MINUS CIERRE
    (91) call_function -> . NFUNCTION
    (92) call_function -> . NFUNCTION LPARENT arg RPARENT
    (20) sentif -> . IF genif auxsentif
    (17) sentecho -> . ECHO typevar CIERRE
    (18) sentecho -> . ECHO exp CIERRE
    (19) sentecho -> . ECHO cond CIERRE
    (90) sentfunc -> . FUNCTION NFUNCTION LPARENT argfunc RPARENT LCURBRACE declaracion_sentencias RCURBRACE
    (15) sentreturn -> . RETURN type CIERRE
    (16) sentreturn -> . RETURN cond CIERRE
    (93) sentfor -> . FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE expsimple RPARENT LCURBRACE declaracion_sentencias RCURBRACE
    (94) sentfor -> . FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE ID PLUS PLUS RPARENT LCURBRACE declaracion_sentencias RCURBRACE
    (95) sentfor -> . FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE ID MINUS MINUS RPARENT LCURBRACE declaracion_sentencias RCURBRACE
    (96) sentwhile -> . WHILE LPARENT cond RPARENT LCURBRACE declaracion_sentencias RCURBRACE
    (97) sentdowhile -> . DO LCURBRACE declaracion_sentencias RCURBRACE WHILE LPARENT cond RPARENT CIERRE

    ID              shift and go to state 15
    NFUNCTION       shift and go to state 16
    IF              shift and go to state 17
    ECHO            shift and go to state 18
    FUNCTION        shift and go to state 19
    RETURN          shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    DO              shift and go to state 23

    declaracion_sentencias         shift and go to state 168
    sentencias                     shift and go to state 5
    sentassign                     shift and go to state 6
    call_function                  shift and go to state 7
    sentif                         shift and go to state 8
    sentecho                       shift and go to state 9
    sentfunc                       shift and go to state 10
    sentreturn                     shift and go to state 11
    sentfor                        shift and go to state 12
    sentwhile                      shift and go to state 13
    sentdowhile                    shift and go to state 14

state 159

    (35) exp -> LPARENT expsimple opcomparacion expsimple . RPARENT
    (34) exp -> expsimple opcomparacion expsimple .
    (44) expsimple -> expsimple . opsuma term
    (57) opsuma -> . PLUS
    (58) opsuma -> . MINUS

  ! shift/reduce conflict for RPARENT resolved as shift
    RPARENT         shift and go to state 169
    IGUAL           reduce using rule 34 (exp -> expsimple opcomparacion expsimple .)
    NOIGUAL         reduce using rule 34 (exp -> expsimple opcomparacion expsimple .)
    IDENTICO        reduce using rule 34 (exp -> expsimple opcomparacion expsimple .)
    MAYOR           reduce using rule 34 (exp -> expsimple opcomparacion expsimple .)
    MAYORIG         reduce using rule 34 (exp -> expsimple opcomparacion expsimple .)
    MENOR           reduce using rule 34 (exp -> expsimple opcomparacion expsimple .)
    MENORIG         reduce using rule 34 (exp -> expsimple opcomparacion expsimple .)
    AND             reduce using rule 34 (exp -> expsimple opcomparacion expsimple .)
    OR              reduce using rule 34 (exp -> expsimple opcomparacion expsimple .)
    XOR             reduce using rule 34 (exp -> expsimple opcomparacion expsimple .)
    NOT             reduce using rule 34 (exp -> expsimple opcomparacion expsimple .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98

  ! RPARENT         [ reduce using rule 34 (exp -> expsimple opcomparacion expsimple .) ]

    opsuma                         shift and go to state 96

state 160

    (90) sentfunc -> FUNCTION NFUNCTION LPARENT argfunc RPARENT . LCURBRACE declaracion_sentencias RCURBRACE

    LCURBRACE       shift and go to state 170


state 161

    (88) argfunc -> ID COMMA . argfunc
    (87) argfunc -> . ID
    (88) argfunc -> . ID COMMA argfunc
    (89) argfunc -> .

    ID              shift and go to state 146
    RPARENT         reduce using rule 89 (argfunc -> .)

    argfunc                        shift and go to state 171

state 162

    (93) sentfor -> FOR LPARENT ID EQUAL expsimple . CIERRE cond CIERRE expsimple RPARENT LCURBRACE declaracion_sentencias RCURBRACE
    (94) sentfor -> FOR LPARENT ID EQUAL expsimple . CIERRE cond CIERRE ID PLUS PLUS RPARENT LCURBRACE declaracion_sentencias RCURBRACE
    (95) sentfor -> FOR LPARENT ID EQUAL expsimple . CIERRE cond CIERRE ID MINUS MINUS RPARENT LCURBRACE declaracion_sentencias RCURBRACE
    (44) expsimple -> expsimple . opsuma term
    (57) opsuma -> . PLUS
    (58) opsuma -> . MINUS

    CIERRE          shift and go to state 172
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98

    opsuma                         shift and go to state 96

state 163

    (96) sentwhile -> WHILE LPARENT cond RPARENT LCURBRACE . declaracion_sentencias RCURBRACE
    (4) declaracion_sentencias -> . sentencias declaracion_sentencias
    (5) declaracion_sentencias -> . sentencias
    (6) sentencias -> . sentassign
    (7) sentencias -> . call_function CIERRE
    (8) sentencias -> . sentif
    (9) sentencias -> . sentecho
    (10) sentencias -> . sentfunc
    (11) sentencias -> . sentreturn
    (12) sentencias -> . sentfor
    (13) sentencias -> . sentwhile
    (14) sentencias -> . sentdowhile
    (25) sentassign -> . ID EQUAL exp CIERRE
    (26) sentassign -> . ID PLUS PLUS CIERRE
    (27) sentassign -> . ID MINUS MINUS CIERRE
    (91) call_function -> . NFUNCTION
    (92) call_function -> . NFUNCTION LPARENT arg RPARENT
    (20) sentif -> . IF genif auxsentif
    (17) sentecho -> . ECHO typevar CIERRE
    (18) sentecho -> . ECHO exp CIERRE
    (19) sentecho -> . ECHO cond CIERRE
    (90) sentfunc -> . FUNCTION NFUNCTION LPARENT argfunc RPARENT LCURBRACE declaracion_sentencias RCURBRACE
    (15) sentreturn -> . RETURN type CIERRE
    (16) sentreturn -> . RETURN cond CIERRE
    (93) sentfor -> . FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE expsimple RPARENT LCURBRACE declaracion_sentencias RCURBRACE
    (94) sentfor -> . FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE ID PLUS PLUS RPARENT LCURBRACE declaracion_sentencias RCURBRACE
    (95) sentfor -> . FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE ID MINUS MINUS RPARENT LCURBRACE declaracion_sentencias RCURBRACE
    (96) sentwhile -> . WHILE LPARENT cond RPARENT LCURBRACE declaracion_sentencias RCURBRACE
    (97) sentdowhile -> . DO LCURBRACE declaracion_sentencias RCURBRACE WHILE LPARENT cond RPARENT CIERRE

    ID              shift and go to state 15
    NFUNCTION       shift and go to state 16
    IF              shift and go to state 17
    ECHO            shift and go to state 18
    FUNCTION        shift and go to state 19
    RETURN          shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    DO              shift and go to state 23

    declaracion_sentencias         shift and go to state 173
    sentencias                     shift and go to state 5
    sentassign                     shift and go to state 6
    call_function                  shift and go to state 7
    sentif                         shift and go to state 8
    sentecho                       shift and go to state 9
    sentfunc                       shift and go to state 10
    sentreturn                     shift and go to state 11
    sentfor                        shift and go to state 12
    sentwhile                      shift and go to state 13
    sentdowhile                    shift and go to state 14

state 164

    (97) sentdowhile -> DO LCURBRACE declaracion_sentencias RCURBRACE WHILE . LPARENT cond RPARENT CIERRE

    LPARENT         shift and go to state 174


state 165

    (35) exp -> LPARENT expsimple opcomparacion expsimple . RPARENT
    (44) expsimple -> expsimple . opsuma term
    (57) opsuma -> . PLUS
    (58) opsuma -> . MINUS

    RPARENT         shift and go to state 169
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98

    opsuma                         shift and go to state 96

state 166

    (21) auxsentif -> ELSE IF genif auxsentif .

    ID              reduce using rule 21 (auxsentif -> ELSE IF genif auxsentif .)
    NFUNCTION       reduce using rule 21 (auxsentif -> ELSE IF genif auxsentif .)
    IF              reduce using rule 21 (auxsentif -> ELSE IF genif auxsentif .)
    ECHO            reduce using rule 21 (auxsentif -> ELSE IF genif auxsentif .)
    FUNCTION        reduce using rule 21 (auxsentif -> ELSE IF genif auxsentif .)
    RETURN          reduce using rule 21 (auxsentif -> ELSE IF genif auxsentif .)
    FOR             reduce using rule 21 (auxsentif -> ELSE IF genif auxsentif .)
    WHILE           reduce using rule 21 (auxsentif -> ELSE IF genif auxsentif .)
    DO              reduce using rule 21 (auxsentif -> ELSE IF genif auxsentif .)
    $end            reduce using rule 21 (auxsentif -> ELSE IF genif auxsentif .)
    RCURBRACE       reduce using rule 21 (auxsentif -> ELSE IF genif auxsentif .)


state 167

    (22) auxsentif -> ELSE LCURBRACE declaracion_sentencias RCURBRACE .

    ID              reduce using rule 22 (auxsentif -> ELSE LCURBRACE declaracion_sentencias RCURBRACE .)
    NFUNCTION       reduce using rule 22 (auxsentif -> ELSE LCURBRACE declaracion_sentencias RCURBRACE .)
    IF              reduce using rule 22 (auxsentif -> ELSE LCURBRACE declaracion_sentencias RCURBRACE .)
    ECHO            reduce using rule 22 (auxsentif -> ELSE LCURBRACE declaracion_sentencias RCURBRACE .)
    FUNCTION        reduce using rule 22 (auxsentif -> ELSE LCURBRACE declaracion_sentencias RCURBRACE .)
    RETURN          reduce using rule 22 (auxsentif -> ELSE LCURBRACE declaracion_sentencias RCURBRACE .)
    FOR             reduce using rule 22 (auxsentif -> ELSE LCURBRACE declaracion_sentencias RCURBRACE .)
    WHILE           reduce using rule 22 (auxsentif -> ELSE LCURBRACE declaracion_sentencias RCURBRACE .)
    DO              reduce using rule 22 (auxsentif -> ELSE LCURBRACE declaracion_sentencias RCURBRACE .)
    $end            reduce using rule 22 (auxsentif -> ELSE LCURBRACE declaracion_sentencias RCURBRACE .)
    RCURBRACE       reduce using rule 22 (auxsentif -> ELSE LCURBRACE declaracion_sentencias RCURBRACE .)


state 168

    (24) genif -> LPARENT cond RPARENT LCURBRACE declaracion_sentencias . RCURBRACE

    RCURBRACE       shift and go to state 175


state 169

    (35) exp -> LPARENT expsimple opcomparacion expsimple RPARENT .

    CIERRE          reduce using rule 35 (exp -> LPARENT expsimple opcomparacion expsimple RPARENT .)
    IGUAL           reduce using rule 35 (exp -> LPARENT expsimple opcomparacion expsimple RPARENT .)
    NOIGUAL         reduce using rule 35 (exp -> LPARENT expsimple opcomparacion expsimple RPARENT .)
    IDENTICO        reduce using rule 35 (exp -> LPARENT expsimple opcomparacion expsimple RPARENT .)
    MAYOR           reduce using rule 35 (exp -> LPARENT expsimple opcomparacion expsimple RPARENT .)
    MAYORIG         reduce using rule 35 (exp -> LPARENT expsimple opcomparacion expsimple RPARENT .)
    MENOR           reduce using rule 35 (exp -> LPARENT expsimple opcomparacion expsimple RPARENT .)
    MENORIG         reduce using rule 35 (exp -> LPARENT expsimple opcomparacion expsimple RPARENT .)
    AND             reduce using rule 35 (exp -> LPARENT expsimple opcomparacion expsimple RPARENT .)
    OR              reduce using rule 35 (exp -> LPARENT expsimple opcomparacion expsimple RPARENT .)
    XOR             reduce using rule 35 (exp -> LPARENT expsimple opcomparacion expsimple RPARENT .)
    NOT             reduce using rule 35 (exp -> LPARENT expsimple opcomparacion expsimple RPARENT .)
    COMMA           reduce using rule 35 (exp -> LPARENT expsimple opcomparacion expsimple RPARENT .)
    RPARENT         reduce using rule 35 (exp -> LPARENT expsimple opcomparacion expsimple RPARENT .)


state 170

    (90) sentfunc -> FUNCTION NFUNCTION LPARENT argfunc RPARENT LCURBRACE . declaracion_sentencias RCURBRACE
    (4) declaracion_sentencias -> . sentencias declaracion_sentencias
    (5) declaracion_sentencias -> . sentencias
    (6) sentencias -> . sentassign
    (7) sentencias -> . call_function CIERRE
    (8) sentencias -> . sentif
    (9) sentencias -> . sentecho
    (10) sentencias -> . sentfunc
    (11) sentencias -> . sentreturn
    (12) sentencias -> . sentfor
    (13) sentencias -> . sentwhile
    (14) sentencias -> . sentdowhile
    (25) sentassign -> . ID EQUAL exp CIERRE
    (26) sentassign -> . ID PLUS PLUS CIERRE
    (27) sentassign -> . ID MINUS MINUS CIERRE
    (91) call_function -> . NFUNCTION
    (92) call_function -> . NFUNCTION LPARENT arg RPARENT
    (20) sentif -> . IF genif auxsentif
    (17) sentecho -> . ECHO typevar CIERRE
    (18) sentecho -> . ECHO exp CIERRE
    (19) sentecho -> . ECHO cond CIERRE
    (90) sentfunc -> . FUNCTION NFUNCTION LPARENT argfunc RPARENT LCURBRACE declaracion_sentencias RCURBRACE
    (15) sentreturn -> . RETURN type CIERRE
    (16) sentreturn -> . RETURN cond CIERRE
    (93) sentfor -> . FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE expsimple RPARENT LCURBRACE declaracion_sentencias RCURBRACE
    (94) sentfor -> . FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE ID PLUS PLUS RPARENT LCURBRACE declaracion_sentencias RCURBRACE
    (95) sentfor -> . FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE ID MINUS MINUS RPARENT LCURBRACE declaracion_sentencias RCURBRACE
    (96) sentwhile -> . WHILE LPARENT cond RPARENT LCURBRACE declaracion_sentencias RCURBRACE
    (97) sentdowhile -> . DO LCURBRACE declaracion_sentencias RCURBRACE WHILE LPARENT cond RPARENT CIERRE

    ID              shift and go to state 15
    NFUNCTION       shift and go to state 16
    IF              shift and go to state 17
    ECHO            shift and go to state 18
    FUNCTION        shift and go to state 19
    RETURN          shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    DO              shift and go to state 23

    declaracion_sentencias         shift and go to state 176
    sentencias                     shift and go to state 5
    sentassign                     shift and go to state 6
    call_function                  shift and go to state 7
    sentif                         shift and go to state 8
    sentecho                       shift and go to state 9
    sentfunc                       shift and go to state 10
    sentreturn                     shift and go to state 11
    sentfor                        shift and go to state 12
    sentwhile                      shift and go to state 13
    sentdowhile                    shift and go to state 14

state 171

    (88) argfunc -> ID COMMA argfunc .

    RPARENT         reduce using rule 88 (argfunc -> ID COMMA argfunc .)


state 172

    (93) sentfor -> FOR LPARENT ID EQUAL expsimple CIERRE . cond CIERRE expsimple RPARENT LCURBRACE declaracion_sentencias RCURBRACE
    (94) sentfor -> FOR LPARENT ID EQUAL expsimple CIERRE . cond CIERRE ID PLUS PLUS RPARENT LCURBRACE declaracion_sentencias RCURBRACE
    (95) sentfor -> FOR LPARENT ID EQUAL expsimple CIERRE . cond CIERRE ID MINUS MINUS RPARENT LCURBRACE declaracion_sentencias RCURBRACE
    (63) cond -> . type
    (64) cond -> . cond opcomparacion cond
    (65) cond -> . cond oplogicos cond
    (66) cond -> . LPARENT type RPARENT
    (67) cond -> . LPARENT cond RPARENT
    (68) type -> . typevar
    (69) type -> . var_declaration_gen
    (52) typevar -> . INTEGER
    (53) typevar -> . STRING
    (54) typevar -> . STRINGG
    (55) typevar -> . TRUE
    (56) typevar -> . FALSE
    (70) var_declaration_gen -> . ID
    (71) var_declaration_gen -> . ID PLUS PLUS
    (72) var_declaration_gen -> . ID MINUS MINUS
    (73) var_declaration_gen -> . MINUS MINUS ID
    (74) var_declaration_gen -> . PLUS PLUS ID
    (75) var_declaration_gen -> . typevar
    (76) var_declaration_gen -> . exp
    (34) exp -> . expsimple opcomparacion expsimple
    (35) exp -> . LPARENT expsimple opcomparacion expsimple RPARENT
    (36) exp -> . expsimple
    (44) expsimple -> . expsimple opsuma term
    (45) expsimple -> . term
    (46) term -> . term opmult factor
    (47) term -> . factor
    (48) factor -> . INTEGER
    (49) factor -> . ID
    (50) factor -> . call_function
    (51) factor -> . LPARENT expsimple RPARENT
    (91) call_function -> . NFUNCTION
    (92) call_function -> . NFUNCTION LPARENT arg RPARENT

    LPARENT         shift and go to state 56
    INTEGER         shift and go to state 37
    STRING          shift and go to state 38
    STRINGG         shift and go to state 39
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    ID              shift and go to state 48
    MINUS           shift and go to state 50
    PLUS            shift and go to state 49
    NFUNCTION       shift and go to state 16

    expsimple                      shift and go to state 42
    cond                           shift and go to state 177
    type                           shift and go to state 44
    typevar                        shift and go to state 55
    var_declaration_gen            shift and go to state 46
    exp                            shift and go to state 57
    term                           shift and go to state 45
    factor                         shift and go to state 47
    call_function                  shift and go to state 51

state 173

    (96) sentwhile -> WHILE LPARENT cond RPARENT LCURBRACE declaracion_sentencias . RCURBRACE

    RCURBRACE       shift and go to state 178


state 174

    (97) sentdowhile -> DO LCURBRACE declaracion_sentencias RCURBRACE WHILE LPARENT . cond RPARENT CIERRE
    (63) cond -> . type
    (64) cond -> . cond opcomparacion cond
    (65) cond -> . cond oplogicos cond
    (66) cond -> . LPARENT type RPARENT
    (67) cond -> . LPARENT cond RPARENT
    (68) type -> . typevar
    (69) type -> . var_declaration_gen
    (52) typevar -> . INTEGER
    (53) typevar -> . STRING
    (54) typevar -> . STRINGG
    (55) typevar -> . TRUE
    (56) typevar -> . FALSE
    (70) var_declaration_gen -> . ID
    (71) var_declaration_gen -> . ID PLUS PLUS
    (72) var_declaration_gen -> . ID MINUS MINUS
    (73) var_declaration_gen -> . MINUS MINUS ID
    (74) var_declaration_gen -> . PLUS PLUS ID
    (75) var_declaration_gen -> . typevar
    (76) var_declaration_gen -> . exp
    (34) exp -> . expsimple opcomparacion expsimple
    (35) exp -> . LPARENT expsimple opcomparacion expsimple RPARENT
    (36) exp -> . expsimple
    (44) expsimple -> . expsimple opsuma term
    (45) expsimple -> . term
    (46) term -> . term opmult factor
    (47) term -> . factor
    (48) factor -> . INTEGER
    (49) factor -> . ID
    (50) factor -> . call_function
    (51) factor -> . LPARENT expsimple RPARENT
    (91) call_function -> . NFUNCTION
    (92) call_function -> . NFUNCTION LPARENT arg RPARENT

    LPARENT         shift and go to state 56
    INTEGER         shift and go to state 37
    STRING          shift and go to state 38
    STRINGG         shift and go to state 39
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    ID              shift and go to state 48
    MINUS           shift and go to state 50
    PLUS            shift and go to state 49
    NFUNCTION       shift and go to state 16

    cond                           shift and go to state 179
    type                           shift and go to state 44
    typevar                        shift and go to state 55
    var_declaration_gen            shift and go to state 46
    exp                            shift and go to state 57
    expsimple                      shift and go to state 42
    term                           shift and go to state 45
    factor                         shift and go to state 47
    call_function                  shift and go to state 51

state 175

    (24) genif -> LPARENT cond RPARENT LCURBRACE declaracion_sentencias RCURBRACE .

    ELSE            reduce using rule 24 (genif -> LPARENT cond RPARENT LCURBRACE declaracion_sentencias RCURBRACE .)
    ID              reduce using rule 24 (genif -> LPARENT cond RPARENT LCURBRACE declaracion_sentencias RCURBRACE .)
    NFUNCTION       reduce using rule 24 (genif -> LPARENT cond RPARENT LCURBRACE declaracion_sentencias RCURBRACE .)
    IF              reduce using rule 24 (genif -> LPARENT cond RPARENT LCURBRACE declaracion_sentencias RCURBRACE .)
    ECHO            reduce using rule 24 (genif -> LPARENT cond RPARENT LCURBRACE declaracion_sentencias RCURBRACE .)
    FUNCTION        reduce using rule 24 (genif -> LPARENT cond RPARENT LCURBRACE declaracion_sentencias RCURBRACE .)
    RETURN          reduce using rule 24 (genif -> LPARENT cond RPARENT LCURBRACE declaracion_sentencias RCURBRACE .)
    FOR             reduce using rule 24 (genif -> LPARENT cond RPARENT LCURBRACE declaracion_sentencias RCURBRACE .)
    WHILE           reduce using rule 24 (genif -> LPARENT cond RPARENT LCURBRACE declaracion_sentencias RCURBRACE .)
    DO              reduce using rule 24 (genif -> LPARENT cond RPARENT LCURBRACE declaracion_sentencias RCURBRACE .)
    $end            reduce using rule 24 (genif -> LPARENT cond RPARENT LCURBRACE declaracion_sentencias RCURBRACE .)
    RCURBRACE       reduce using rule 24 (genif -> LPARENT cond RPARENT LCURBRACE declaracion_sentencias RCURBRACE .)


state 176

    (90) sentfunc -> FUNCTION NFUNCTION LPARENT argfunc RPARENT LCURBRACE declaracion_sentencias . RCURBRACE

    RCURBRACE       shift and go to state 180


state 177

    (93) sentfor -> FOR LPARENT ID EQUAL expsimple CIERRE cond . CIERRE expsimple RPARENT LCURBRACE declaracion_sentencias RCURBRACE
    (94) sentfor -> FOR LPARENT ID EQUAL expsimple CIERRE cond . CIERRE ID PLUS PLUS RPARENT LCURBRACE declaracion_sentencias RCURBRACE
    (95) sentfor -> FOR LPARENT ID EQUAL expsimple CIERRE cond . CIERRE ID MINUS MINUS RPARENT LCURBRACE declaracion_sentencias RCURBRACE
    (64) cond -> cond . opcomparacion cond
    (65) cond -> cond . oplogicos cond
    (37) opcomparacion -> . IGUAL
    (38) opcomparacion -> . NOIGUAL
    (39) opcomparacion -> . IDENTICO
    (40) opcomparacion -> . MAYOR
    (41) opcomparacion -> . MAYORIG
    (42) opcomparacion -> . MENOR
    (43) opcomparacion -> . MENORIG
    (30) oplogicos -> . AND
    (31) oplogicos -> . OR
    (32) oplogicos -> . XOR
    (33) oplogicos -> . NOT

    CIERRE          shift and go to state 181
    IGUAL           shift and go to state 84
    NOIGUAL         shift and go to state 85
    IDENTICO        shift and go to state 86
    MAYOR           shift and go to state 87
    MAYORIG         shift and go to state 88
    MENOR           shift and go to state 89
    MENORIG         shift and go to state 90
    AND             shift and go to state 91
    OR              shift and go to state 92
    XOR             shift and go to state 93
    NOT             shift and go to state 94

    opcomparacion                  shift and go to state 82
    oplogicos                      shift and go to state 83

state 178

    (96) sentwhile -> WHILE LPARENT cond RPARENT LCURBRACE declaracion_sentencias RCURBRACE .

    ID              reduce using rule 96 (sentwhile -> WHILE LPARENT cond RPARENT LCURBRACE declaracion_sentencias RCURBRACE .)
    NFUNCTION       reduce using rule 96 (sentwhile -> WHILE LPARENT cond RPARENT LCURBRACE declaracion_sentencias RCURBRACE .)
    IF              reduce using rule 96 (sentwhile -> WHILE LPARENT cond RPARENT LCURBRACE declaracion_sentencias RCURBRACE .)
    ECHO            reduce using rule 96 (sentwhile -> WHILE LPARENT cond RPARENT LCURBRACE declaracion_sentencias RCURBRACE .)
    FUNCTION        reduce using rule 96 (sentwhile -> WHILE LPARENT cond RPARENT LCURBRACE declaracion_sentencias RCURBRACE .)
    RETURN          reduce using rule 96 (sentwhile -> WHILE LPARENT cond RPARENT LCURBRACE declaracion_sentencias RCURBRACE .)
    FOR             reduce using rule 96 (sentwhile -> WHILE LPARENT cond RPARENT LCURBRACE declaracion_sentencias RCURBRACE .)
    WHILE           reduce using rule 96 (sentwhile -> WHILE LPARENT cond RPARENT LCURBRACE declaracion_sentencias RCURBRACE .)
    DO              reduce using rule 96 (sentwhile -> WHILE LPARENT cond RPARENT LCURBRACE declaracion_sentencias RCURBRACE .)
    $end            reduce using rule 96 (sentwhile -> WHILE LPARENT cond RPARENT LCURBRACE declaracion_sentencias RCURBRACE .)
    RCURBRACE       reduce using rule 96 (sentwhile -> WHILE LPARENT cond RPARENT LCURBRACE declaracion_sentencias RCURBRACE .)


state 179

    (97) sentdowhile -> DO LCURBRACE declaracion_sentencias RCURBRACE WHILE LPARENT cond . RPARENT CIERRE
    (64) cond -> cond . opcomparacion cond
    (65) cond -> cond . oplogicos cond
    (37) opcomparacion -> . IGUAL
    (38) opcomparacion -> . NOIGUAL
    (39) opcomparacion -> . IDENTICO
    (40) opcomparacion -> . MAYOR
    (41) opcomparacion -> . MAYORIG
    (42) opcomparacion -> . MENOR
    (43) opcomparacion -> . MENORIG
    (30) oplogicos -> . AND
    (31) oplogicos -> . OR
    (32) oplogicos -> . XOR
    (33) oplogicos -> . NOT

    RPARENT         shift and go to state 182
    IGUAL           shift and go to state 84
    NOIGUAL         shift and go to state 85
    IDENTICO        shift and go to state 86
    MAYOR           shift and go to state 87
    MAYORIG         shift and go to state 88
    MENOR           shift and go to state 89
    MENORIG         shift and go to state 90
    AND             shift and go to state 91
    OR              shift and go to state 92
    XOR             shift and go to state 93
    NOT             shift and go to state 94

    opcomparacion                  shift and go to state 82
    oplogicos                      shift and go to state 83

state 180

    (90) sentfunc -> FUNCTION NFUNCTION LPARENT argfunc RPARENT LCURBRACE declaracion_sentencias RCURBRACE .

    ID              reduce using rule 90 (sentfunc -> FUNCTION NFUNCTION LPARENT argfunc RPARENT LCURBRACE declaracion_sentencias RCURBRACE .)
    NFUNCTION       reduce using rule 90 (sentfunc -> FUNCTION NFUNCTION LPARENT argfunc RPARENT LCURBRACE declaracion_sentencias RCURBRACE .)
    IF              reduce using rule 90 (sentfunc -> FUNCTION NFUNCTION LPARENT argfunc RPARENT LCURBRACE declaracion_sentencias RCURBRACE .)
    ECHO            reduce using rule 90 (sentfunc -> FUNCTION NFUNCTION LPARENT argfunc RPARENT LCURBRACE declaracion_sentencias RCURBRACE .)
    FUNCTION        reduce using rule 90 (sentfunc -> FUNCTION NFUNCTION LPARENT argfunc RPARENT LCURBRACE declaracion_sentencias RCURBRACE .)
    RETURN          reduce using rule 90 (sentfunc -> FUNCTION NFUNCTION LPARENT argfunc RPARENT LCURBRACE declaracion_sentencias RCURBRACE .)
    FOR             reduce using rule 90 (sentfunc -> FUNCTION NFUNCTION LPARENT argfunc RPARENT LCURBRACE declaracion_sentencias RCURBRACE .)
    WHILE           reduce using rule 90 (sentfunc -> FUNCTION NFUNCTION LPARENT argfunc RPARENT LCURBRACE declaracion_sentencias RCURBRACE .)
    DO              reduce using rule 90 (sentfunc -> FUNCTION NFUNCTION LPARENT argfunc RPARENT LCURBRACE declaracion_sentencias RCURBRACE .)
    $end            reduce using rule 90 (sentfunc -> FUNCTION NFUNCTION LPARENT argfunc RPARENT LCURBRACE declaracion_sentencias RCURBRACE .)
    RCURBRACE       reduce using rule 90 (sentfunc -> FUNCTION NFUNCTION LPARENT argfunc RPARENT LCURBRACE declaracion_sentencias RCURBRACE .)


state 181

    (93) sentfor -> FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE . expsimple RPARENT LCURBRACE declaracion_sentencias RCURBRACE
    (94) sentfor -> FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE . ID PLUS PLUS RPARENT LCURBRACE declaracion_sentencias RCURBRACE
    (95) sentfor -> FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE . ID MINUS MINUS RPARENT LCURBRACE declaracion_sentencias RCURBRACE
    (44) expsimple -> . expsimple opsuma term
    (45) expsimple -> . term
    (46) term -> . term opmult factor
    (47) term -> . factor
    (48) factor -> . INTEGER
    (49) factor -> . ID
    (50) factor -> . call_function
    (51) factor -> . LPARENT expsimple RPARENT
    (91) call_function -> . NFUNCTION
    (92) call_function -> . NFUNCTION LPARENT arg RPARENT

    ID              shift and go to state 183
    INTEGER         shift and go to state 65
    LPARENT         shift and go to state 119
    NFUNCTION       shift and go to state 16

    expsimple                      shift and go to state 184
    term                           shift and go to state 45
    factor                         shift and go to state 47
    call_function                  shift and go to state 51

state 182

    (97) sentdowhile -> DO LCURBRACE declaracion_sentencias RCURBRACE WHILE LPARENT cond RPARENT . CIERRE

    CIERRE          shift and go to state 185


state 183

    (94) sentfor -> FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE ID . PLUS PLUS RPARENT LCURBRACE declaracion_sentencias RCURBRACE
    (95) sentfor -> FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE ID . MINUS MINUS RPARENT LCURBRACE declaracion_sentencias RCURBRACE
    (49) factor -> ID .

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    PLUS            shift and go to state 186
    MINUS           shift and go to state 187
    TIMES           reduce using rule 49 (factor -> ID .)
    DIV             reduce using rule 49 (factor -> ID .)
    MODULO          reduce using rule 49 (factor -> ID .)
    EXPONENCIACION  reduce using rule 49 (factor -> ID .)
    RPARENT         reduce using rule 49 (factor -> ID .)

  ! PLUS            [ reduce using rule 49 (factor -> ID .) ]
  ! MINUS           [ reduce using rule 49 (factor -> ID .) ]


state 184

    (93) sentfor -> FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE expsimple . RPARENT LCURBRACE declaracion_sentencias RCURBRACE
    (44) expsimple -> expsimple . opsuma term
    (57) opsuma -> . PLUS
    (58) opsuma -> . MINUS

    RPARENT         shift and go to state 188
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98

    opsuma                         shift and go to state 96

state 185

    (97) sentdowhile -> DO LCURBRACE declaracion_sentencias RCURBRACE WHILE LPARENT cond RPARENT CIERRE .

    ID              reduce using rule 97 (sentdowhile -> DO LCURBRACE declaracion_sentencias RCURBRACE WHILE LPARENT cond RPARENT CIERRE .)
    NFUNCTION       reduce using rule 97 (sentdowhile -> DO LCURBRACE declaracion_sentencias RCURBRACE WHILE LPARENT cond RPARENT CIERRE .)
    IF              reduce using rule 97 (sentdowhile -> DO LCURBRACE declaracion_sentencias RCURBRACE WHILE LPARENT cond RPARENT CIERRE .)
    ECHO            reduce using rule 97 (sentdowhile -> DO LCURBRACE declaracion_sentencias RCURBRACE WHILE LPARENT cond RPARENT CIERRE .)
    FUNCTION        reduce using rule 97 (sentdowhile -> DO LCURBRACE declaracion_sentencias RCURBRACE WHILE LPARENT cond RPARENT CIERRE .)
    RETURN          reduce using rule 97 (sentdowhile -> DO LCURBRACE declaracion_sentencias RCURBRACE WHILE LPARENT cond RPARENT CIERRE .)
    FOR             reduce using rule 97 (sentdowhile -> DO LCURBRACE declaracion_sentencias RCURBRACE WHILE LPARENT cond RPARENT CIERRE .)
    WHILE           reduce using rule 97 (sentdowhile -> DO LCURBRACE declaracion_sentencias RCURBRACE WHILE LPARENT cond RPARENT CIERRE .)
    DO              reduce using rule 97 (sentdowhile -> DO LCURBRACE declaracion_sentencias RCURBRACE WHILE LPARENT cond RPARENT CIERRE .)
    $end            reduce using rule 97 (sentdowhile -> DO LCURBRACE declaracion_sentencias RCURBRACE WHILE LPARENT cond RPARENT CIERRE .)
    RCURBRACE       reduce using rule 97 (sentdowhile -> DO LCURBRACE declaracion_sentencias RCURBRACE WHILE LPARENT cond RPARENT CIERRE .)


state 186

    (94) sentfor -> FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE ID PLUS . PLUS RPARENT LCURBRACE declaracion_sentencias RCURBRACE

    PLUS            shift and go to state 189


state 187

    (95) sentfor -> FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE ID MINUS . MINUS RPARENT LCURBRACE declaracion_sentencias RCURBRACE

    MINUS           shift and go to state 190


state 188

    (93) sentfor -> FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE expsimple RPARENT . LCURBRACE declaracion_sentencias RCURBRACE

    LCURBRACE       shift and go to state 191


state 189

    (94) sentfor -> FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE ID PLUS PLUS . RPARENT LCURBRACE declaracion_sentencias RCURBRACE

    RPARENT         shift and go to state 192


state 190

    (95) sentfor -> FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE ID MINUS MINUS . RPARENT LCURBRACE declaracion_sentencias RCURBRACE

    RPARENT         shift and go to state 193


state 191

    (93) sentfor -> FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE expsimple RPARENT LCURBRACE . declaracion_sentencias RCURBRACE
    (4) declaracion_sentencias -> . sentencias declaracion_sentencias
    (5) declaracion_sentencias -> . sentencias
    (6) sentencias -> . sentassign
    (7) sentencias -> . call_function CIERRE
    (8) sentencias -> . sentif
    (9) sentencias -> . sentecho
    (10) sentencias -> . sentfunc
    (11) sentencias -> . sentreturn
    (12) sentencias -> . sentfor
    (13) sentencias -> . sentwhile
    (14) sentencias -> . sentdowhile
    (25) sentassign -> . ID EQUAL exp CIERRE
    (26) sentassign -> . ID PLUS PLUS CIERRE
    (27) sentassign -> . ID MINUS MINUS CIERRE
    (91) call_function -> . NFUNCTION
    (92) call_function -> . NFUNCTION LPARENT arg RPARENT
    (20) sentif -> . IF genif auxsentif
    (17) sentecho -> . ECHO typevar CIERRE
    (18) sentecho -> . ECHO exp CIERRE
    (19) sentecho -> . ECHO cond CIERRE
    (90) sentfunc -> . FUNCTION NFUNCTION LPARENT argfunc RPARENT LCURBRACE declaracion_sentencias RCURBRACE
    (15) sentreturn -> . RETURN type CIERRE
    (16) sentreturn -> . RETURN cond CIERRE
    (93) sentfor -> . FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE expsimple RPARENT LCURBRACE declaracion_sentencias RCURBRACE
    (94) sentfor -> . FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE ID PLUS PLUS RPARENT LCURBRACE declaracion_sentencias RCURBRACE
    (95) sentfor -> . FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE ID MINUS MINUS RPARENT LCURBRACE declaracion_sentencias RCURBRACE
    (96) sentwhile -> . WHILE LPARENT cond RPARENT LCURBRACE declaracion_sentencias RCURBRACE
    (97) sentdowhile -> . DO LCURBRACE declaracion_sentencias RCURBRACE WHILE LPARENT cond RPARENT CIERRE

    ID              shift and go to state 15
    NFUNCTION       shift and go to state 16
    IF              shift and go to state 17
    ECHO            shift and go to state 18
    FUNCTION        shift and go to state 19
    RETURN          shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    DO              shift and go to state 23

    declaracion_sentencias         shift and go to state 194
    sentencias                     shift and go to state 5
    sentassign                     shift and go to state 6
    call_function                  shift and go to state 7
    sentif                         shift and go to state 8
    sentecho                       shift and go to state 9
    sentfunc                       shift and go to state 10
    sentreturn                     shift and go to state 11
    sentfor                        shift and go to state 12
    sentwhile                      shift and go to state 13
    sentdowhile                    shift and go to state 14

state 192

    (94) sentfor -> FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE ID PLUS PLUS RPARENT . LCURBRACE declaracion_sentencias RCURBRACE

    LCURBRACE       shift and go to state 195


state 193

    (95) sentfor -> FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE ID MINUS MINUS RPARENT . LCURBRACE declaracion_sentencias RCURBRACE

    LCURBRACE       shift and go to state 196


state 194

    (93) sentfor -> FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE expsimple RPARENT LCURBRACE declaracion_sentencias . RCURBRACE

    RCURBRACE       shift and go to state 197


state 195

    (94) sentfor -> FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE ID PLUS PLUS RPARENT LCURBRACE . declaracion_sentencias RCURBRACE
    (4) declaracion_sentencias -> . sentencias declaracion_sentencias
    (5) declaracion_sentencias -> . sentencias
    (6) sentencias -> . sentassign
    (7) sentencias -> . call_function CIERRE
    (8) sentencias -> . sentif
    (9) sentencias -> . sentecho
    (10) sentencias -> . sentfunc
    (11) sentencias -> . sentreturn
    (12) sentencias -> . sentfor
    (13) sentencias -> . sentwhile
    (14) sentencias -> . sentdowhile
    (25) sentassign -> . ID EQUAL exp CIERRE
    (26) sentassign -> . ID PLUS PLUS CIERRE
    (27) sentassign -> . ID MINUS MINUS CIERRE
    (91) call_function -> . NFUNCTION
    (92) call_function -> . NFUNCTION LPARENT arg RPARENT
    (20) sentif -> . IF genif auxsentif
    (17) sentecho -> . ECHO typevar CIERRE
    (18) sentecho -> . ECHO exp CIERRE
    (19) sentecho -> . ECHO cond CIERRE
    (90) sentfunc -> . FUNCTION NFUNCTION LPARENT argfunc RPARENT LCURBRACE declaracion_sentencias RCURBRACE
    (15) sentreturn -> . RETURN type CIERRE
    (16) sentreturn -> . RETURN cond CIERRE
    (93) sentfor -> . FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE expsimple RPARENT LCURBRACE declaracion_sentencias RCURBRACE
    (94) sentfor -> . FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE ID PLUS PLUS RPARENT LCURBRACE declaracion_sentencias RCURBRACE
    (95) sentfor -> . FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE ID MINUS MINUS RPARENT LCURBRACE declaracion_sentencias RCURBRACE
    (96) sentwhile -> . WHILE LPARENT cond RPARENT LCURBRACE declaracion_sentencias RCURBRACE
    (97) sentdowhile -> . DO LCURBRACE declaracion_sentencias RCURBRACE WHILE LPARENT cond RPARENT CIERRE

    ID              shift and go to state 15
    NFUNCTION       shift and go to state 16
    IF              shift and go to state 17
    ECHO            shift and go to state 18
    FUNCTION        shift and go to state 19
    RETURN          shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    DO              shift and go to state 23

    declaracion_sentencias         shift and go to state 198
    sentencias                     shift and go to state 5
    sentassign                     shift and go to state 6
    call_function                  shift and go to state 7
    sentif                         shift and go to state 8
    sentecho                       shift and go to state 9
    sentfunc                       shift and go to state 10
    sentreturn                     shift and go to state 11
    sentfor                        shift and go to state 12
    sentwhile                      shift and go to state 13
    sentdowhile                    shift and go to state 14

state 196

    (95) sentfor -> FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE ID MINUS MINUS RPARENT LCURBRACE . declaracion_sentencias RCURBRACE
    (4) declaracion_sentencias -> . sentencias declaracion_sentencias
    (5) declaracion_sentencias -> . sentencias
    (6) sentencias -> . sentassign
    (7) sentencias -> . call_function CIERRE
    (8) sentencias -> . sentif
    (9) sentencias -> . sentecho
    (10) sentencias -> . sentfunc
    (11) sentencias -> . sentreturn
    (12) sentencias -> . sentfor
    (13) sentencias -> . sentwhile
    (14) sentencias -> . sentdowhile
    (25) sentassign -> . ID EQUAL exp CIERRE
    (26) sentassign -> . ID PLUS PLUS CIERRE
    (27) sentassign -> . ID MINUS MINUS CIERRE
    (91) call_function -> . NFUNCTION
    (92) call_function -> . NFUNCTION LPARENT arg RPARENT
    (20) sentif -> . IF genif auxsentif
    (17) sentecho -> . ECHO typevar CIERRE
    (18) sentecho -> . ECHO exp CIERRE
    (19) sentecho -> . ECHO cond CIERRE
    (90) sentfunc -> . FUNCTION NFUNCTION LPARENT argfunc RPARENT LCURBRACE declaracion_sentencias RCURBRACE
    (15) sentreturn -> . RETURN type CIERRE
    (16) sentreturn -> . RETURN cond CIERRE
    (93) sentfor -> . FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE expsimple RPARENT LCURBRACE declaracion_sentencias RCURBRACE
    (94) sentfor -> . FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE ID PLUS PLUS RPARENT LCURBRACE declaracion_sentencias RCURBRACE
    (95) sentfor -> . FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE ID MINUS MINUS RPARENT LCURBRACE declaracion_sentencias RCURBRACE
    (96) sentwhile -> . WHILE LPARENT cond RPARENT LCURBRACE declaracion_sentencias RCURBRACE
    (97) sentdowhile -> . DO LCURBRACE declaracion_sentencias RCURBRACE WHILE LPARENT cond RPARENT CIERRE

    ID              shift and go to state 15
    NFUNCTION       shift and go to state 16
    IF              shift and go to state 17
    ECHO            shift and go to state 18
    FUNCTION        shift and go to state 19
    RETURN          shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 22
    DO              shift and go to state 23

    declaracion_sentencias         shift and go to state 199
    sentencias                     shift and go to state 5
    sentassign                     shift and go to state 6
    call_function                  shift and go to state 7
    sentif                         shift and go to state 8
    sentecho                       shift and go to state 9
    sentfunc                       shift and go to state 10
    sentreturn                     shift and go to state 11
    sentfor                        shift and go to state 12
    sentwhile                      shift and go to state 13
    sentdowhile                    shift and go to state 14

state 197

    (93) sentfor -> FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE expsimple RPARENT LCURBRACE declaracion_sentencias RCURBRACE .

    ID              reduce using rule 93 (sentfor -> FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE expsimple RPARENT LCURBRACE declaracion_sentencias RCURBRACE .)
    NFUNCTION       reduce using rule 93 (sentfor -> FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE expsimple RPARENT LCURBRACE declaracion_sentencias RCURBRACE .)
    IF              reduce using rule 93 (sentfor -> FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE expsimple RPARENT LCURBRACE declaracion_sentencias RCURBRACE .)
    ECHO            reduce using rule 93 (sentfor -> FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE expsimple RPARENT LCURBRACE declaracion_sentencias RCURBRACE .)
    FUNCTION        reduce using rule 93 (sentfor -> FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE expsimple RPARENT LCURBRACE declaracion_sentencias RCURBRACE .)
    RETURN          reduce using rule 93 (sentfor -> FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE expsimple RPARENT LCURBRACE declaracion_sentencias RCURBRACE .)
    FOR             reduce using rule 93 (sentfor -> FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE expsimple RPARENT LCURBRACE declaracion_sentencias RCURBRACE .)
    WHILE           reduce using rule 93 (sentfor -> FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE expsimple RPARENT LCURBRACE declaracion_sentencias RCURBRACE .)
    DO              reduce using rule 93 (sentfor -> FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE expsimple RPARENT LCURBRACE declaracion_sentencias RCURBRACE .)
    $end            reduce using rule 93 (sentfor -> FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE expsimple RPARENT LCURBRACE declaracion_sentencias RCURBRACE .)
    RCURBRACE       reduce using rule 93 (sentfor -> FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE expsimple RPARENT LCURBRACE declaracion_sentencias RCURBRACE .)


state 198

    (94) sentfor -> FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE ID PLUS PLUS RPARENT LCURBRACE declaracion_sentencias . RCURBRACE

    RCURBRACE       shift and go to state 200


state 199

    (95) sentfor -> FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE ID MINUS MINUS RPARENT LCURBRACE declaracion_sentencias . RCURBRACE

    RCURBRACE       shift and go to state 201


state 200

    (94) sentfor -> FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE ID PLUS PLUS RPARENT LCURBRACE declaracion_sentencias RCURBRACE .

    ID              reduce using rule 94 (sentfor -> FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE ID PLUS PLUS RPARENT LCURBRACE declaracion_sentencias RCURBRACE .)
    NFUNCTION       reduce using rule 94 (sentfor -> FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE ID PLUS PLUS RPARENT LCURBRACE declaracion_sentencias RCURBRACE .)
    IF              reduce using rule 94 (sentfor -> FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE ID PLUS PLUS RPARENT LCURBRACE declaracion_sentencias RCURBRACE .)
    ECHO            reduce using rule 94 (sentfor -> FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE ID PLUS PLUS RPARENT LCURBRACE declaracion_sentencias RCURBRACE .)
    FUNCTION        reduce using rule 94 (sentfor -> FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE ID PLUS PLUS RPARENT LCURBRACE declaracion_sentencias RCURBRACE .)
    RETURN          reduce using rule 94 (sentfor -> FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE ID PLUS PLUS RPARENT LCURBRACE declaracion_sentencias RCURBRACE .)
    FOR             reduce using rule 94 (sentfor -> FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE ID PLUS PLUS RPARENT LCURBRACE declaracion_sentencias RCURBRACE .)
    WHILE           reduce using rule 94 (sentfor -> FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE ID PLUS PLUS RPARENT LCURBRACE declaracion_sentencias RCURBRACE .)
    DO              reduce using rule 94 (sentfor -> FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE ID PLUS PLUS RPARENT LCURBRACE declaracion_sentencias RCURBRACE .)
    $end            reduce using rule 94 (sentfor -> FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE ID PLUS PLUS RPARENT LCURBRACE declaracion_sentencias RCURBRACE .)
    RCURBRACE       reduce using rule 94 (sentfor -> FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE ID PLUS PLUS RPARENT LCURBRACE declaracion_sentencias RCURBRACE .)


state 201

    (95) sentfor -> FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE ID MINUS MINUS RPARENT LCURBRACE declaracion_sentencias RCURBRACE .

    ID              reduce using rule 95 (sentfor -> FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE ID MINUS MINUS RPARENT LCURBRACE declaracion_sentencias RCURBRACE .)
    NFUNCTION       reduce using rule 95 (sentfor -> FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE ID MINUS MINUS RPARENT LCURBRACE declaracion_sentencias RCURBRACE .)
    IF              reduce using rule 95 (sentfor -> FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE ID MINUS MINUS RPARENT LCURBRACE declaracion_sentencias RCURBRACE .)
    ECHO            reduce using rule 95 (sentfor -> FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE ID MINUS MINUS RPARENT LCURBRACE declaracion_sentencias RCURBRACE .)
    FUNCTION        reduce using rule 95 (sentfor -> FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE ID MINUS MINUS RPARENT LCURBRACE declaracion_sentencias RCURBRACE .)
    RETURN          reduce using rule 95 (sentfor -> FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE ID MINUS MINUS RPARENT LCURBRACE declaracion_sentencias RCURBRACE .)
    FOR             reduce using rule 95 (sentfor -> FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE ID MINUS MINUS RPARENT LCURBRACE declaracion_sentencias RCURBRACE .)
    WHILE           reduce using rule 95 (sentfor -> FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE ID MINUS MINUS RPARENT LCURBRACE declaracion_sentencias RCURBRACE .)
    DO              reduce using rule 95 (sentfor -> FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE ID MINUS MINUS RPARENT LCURBRACE declaracion_sentencias RCURBRACE .)
    $end            reduce using rule 95 (sentfor -> FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE ID MINUS MINUS RPARENT LCURBRACE declaracion_sentencias RCURBRACE .)
    RCURBRACE       reduce using rule 95 (sentfor -> FOR LPARENT ID EQUAL expsimple CIERRE cond CIERRE ID MINUS MINUS RPARENT LCURBRACE declaracion_sentencias RCURBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for CIERRE in state 34 resolved as shift
WARNING: shift/reduce conflict for CIERRE in state 34 resolved as shift
WARNING: shift/reduce conflict for CIERRE in state 35 resolved as shift
WARNING: shift/reduce conflict for IGUAL in state 42 resolved as shift
WARNING: shift/reduce conflict for NOIGUAL in state 42 resolved as shift
WARNING: shift/reduce conflict for IDENTICO in state 42 resolved as shift
WARNING: shift/reduce conflict for MAYOR in state 42 resolved as shift
WARNING: shift/reduce conflict for MAYORIG in state 42 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 42 resolved as shift
WARNING: shift/reduce conflict for MENORIG in state 42 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 48 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 48 resolved as shift
WARNING: shift/reduce conflict for CIERRE in state 53 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 69 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 72 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 73 resolved as shift
WARNING: shift/reduce conflict for RPARENT in state 100 resolved as shift
WARNING: shift/reduce conflict for IGUAL in state 100 resolved as shift
WARNING: shift/reduce conflict for NOIGUAL in state 100 resolved as shift
WARNING: shift/reduce conflict for IDENTICO in state 100 resolved as shift
WARNING: shift/reduce conflict for MAYOR in state 100 resolved as shift
WARNING: shift/reduce conflict for MAYORIG in state 100 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 100 resolved as shift
WARNING: shift/reduce conflict for MENORIG in state 100 resolved as shift
WARNING: shift/reduce conflict for RPARENT in state 101 resolved as shift
WARNING: shift/reduce conflict for IGUAL in state 131 resolved as shift
WARNING: shift/reduce conflict for NOIGUAL in state 131 resolved as shift
WARNING: shift/reduce conflict for IDENTICO in state 131 resolved as shift
WARNING: shift/reduce conflict for MAYOR in state 131 resolved as shift
WARNING: shift/reduce conflict for MAYORIG in state 131 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 131 resolved as shift
WARNING: shift/reduce conflict for MENORIG in state 131 resolved as shift
WARNING: shift/reduce conflict for AND in state 131 resolved as shift
WARNING: shift/reduce conflict for OR in state 131 resolved as shift
WARNING: shift/reduce conflict for XOR in state 131 resolved as shift
WARNING: shift/reduce conflict for NOT in state 131 resolved as shift
WARNING: shift/reduce conflict for IGUAL in state 132 resolved as shift
WARNING: shift/reduce conflict for NOIGUAL in state 132 resolved as shift
WARNING: shift/reduce conflict for IDENTICO in state 132 resolved as shift
WARNING: shift/reduce conflict for MAYOR in state 132 resolved as shift
WARNING: shift/reduce conflict for MAYORIG in state 132 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 132 resolved as shift
WARNING: shift/reduce conflict for MENORIG in state 132 resolved as shift
WARNING: shift/reduce conflict for AND in state 132 resolved as shift
WARNING: shift/reduce conflict for OR in state 132 resolved as shift
WARNING: shift/reduce conflict for XOR in state 132 resolved as shift
WARNING: shift/reduce conflict for NOT in state 132 resolved as shift
WARNING: shift/reduce conflict for RPARENT in state 135 resolved as shift
WARNING: shift/reduce conflict for IGUAL in state 135 resolved as shift
WARNING: shift/reduce conflict for NOIGUAL in state 135 resolved as shift
WARNING: shift/reduce conflict for IDENTICO in state 135 resolved as shift
WARNING: shift/reduce conflict for MAYOR in state 135 resolved as shift
WARNING: shift/reduce conflict for MAYORIG in state 135 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 135 resolved as shift
WARNING: shift/reduce conflict for MENORIG in state 135 resolved as shift
WARNING: shift/reduce conflict for RPARENT in state 159 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 183 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 183 resolved as shift
WARNING: reduce/reduce conflict in state 34 resolved using rule (type -> typevar)
WARNING: rejected rule (var_declaration_gen -> typevar) in state 34
WARNING: reduce/reduce conflict in state 37 resolved using rule (factor -> INTEGER)
WARNING: rejected rule (typevar -> INTEGER) in state 37
WARNING: reduce/reduce conflict in state 48 resolved using rule (factor -> ID)
WARNING: rejected rule (var_declaration_gen -> ID) in state 48
WARNING: reduce/reduce conflict in state 55 resolved using rule (type -> typevar)
WARNING: rejected rule (var_declaration_gen -> typevar) in state 55
WARNING: reduce/reduce conflict in state 69 resolved using rule (type -> var_declaration_gen)
WARNING: rejected rule (arg -> var_declaration_gen) in state 69
WARNING: reduce/reduce conflict in state 71 resolved using rule (exp -> expsimple)
WARNING: rejected rule (arg -> expsimple) in state 71
WARNING: reduce/reduce conflict in state 72 resolved using rule (typevar -> STRING)
WARNING: rejected rule (arg -> STRING) in state 72
WARNING: reduce/reduce conflict in state 73 resolved using rule (typevar -> STRINGG)
WARNING: rejected rule (arg -> STRINGG) in state 73
WARNING: reduce/reduce conflict in state 74 resolved using rule (type -> typevar)
WARNING: rejected rule (var_declaration_gen -> typevar) in state 74
WARNING: Rule (var_declaration_gen -> typevar) is never reduced
WARNING: Rule (typevar -> INTEGER) is never reduced
WARNING: Rule (var_declaration_gen -> ID) is never reduced
WARNING: Rule (arg -> var_declaration_gen) is never reduced
WARNING: Rule (arg -> expsimple) is never reduced
WARNING: Rule (arg -> STRING) is never reduced
WARNING: Rule (arg -> STRINGG) is never reduced
